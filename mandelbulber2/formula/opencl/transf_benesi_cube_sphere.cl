/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Benesi Cube to sphere transform
 * Warps a cube to a sphere; transform made by M.Benesi, optimized by Luca.
 * @reference http://www.fractalforums.com/mathematics/circle2square/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 TransfBenesiCubeSphereIteration(
	float4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(fractal);
	Q_UNUSED(aux);

	z *= z; // so all now positive

	// if (z.x == 0.0f)
	//	z.x = 1e-21f;
	// if (z.z == 0.0f)
	//	z.z = 1e-21f;

	float rCyz = native_divide(z.y, z.z);

	float rCxyz = native_divide((z.y + z.z), z.x);

	if (rCxyz == -1.0f) z.z = 1.0f; //+ 1e-21f
	if (rCyz < 1.0f)
		rCyz = native_sqrt(rCyz + 1.0f);
	else
		rCyz = native_sqrt(native_recip(rCyz) + 1.0f);

	if (rCxyz < 1.0f)
		rCxyz = native_sqrt(rCxyz + 1.0f);
	else
		rCxyz = native_sqrt(native_recip(rCxyz) + 1.0f);

	z.y *= rCyz;
	z.z *= rCyz;

	z *= native_divide(rCxyz, SQRT_3_2);
	return z;
}
#else
double4 TransfBenesiCubeSphereIteration(
	double4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(fractal);
	Q_UNUSED(aux);

	z *= z; // so all now positive

	// if (z.x == 0.0)
	//	z.x = 1e-21;
	// if (z.z == 0.0)
	//	z.z = 1e-21;

	double rCyz = native_divide(z.y, z.z);

	double rCxyz = native_divide((z.y + z.z), z.x);

	if (rCxyz == -1.0) z.z = 1.0; //+ 1e-21
	if (rCyz < 1.0)
		rCyz = native_sqrt(rCyz + 1.0);
	else
		rCyz = native_sqrt(1.0 / rCyz + 1.0);

	if (rCxyz < 1.0)
		rCxyz = native_sqrt(rCxyz + 1.0);
	else
		rCxyz = native_sqrt(1.0 / rCxyz + 1.0);

	z.y *= rCyz;
	z.z *= rCyz;

	z *= native_divide(rCxyz, SQRT_3_2);
	return z;
}
#endif
