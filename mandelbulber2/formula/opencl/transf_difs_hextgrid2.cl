/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2019 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * DIFSHextgrid2Iteration  fragmentarium code, mdifs by knighty (jan 2012)
 * and  darkbeams optimized verion @reference
 * http://www.fractalforums.com/mandelbulb-3d/custom-formulas-and-transforms-release-t17106/
 * "Beautiful iso-surface made of a hexagonal grid of tubes.
 * Taken from K3DSurf forum, posted by user abdelhamid belaid."

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the function "TransfDIFSHextgrid2Iteration" in the file fractal_formulas.cpp
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TransfDIFSHextgrid2Iteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	REAL4 zc = z;

	REAL size = fractal->transformCommon.scale1;
	REAL hexD = 0.0;
	zc.z = native_divide(zc.z, fractal->transformCommon.scaleF1);

	REAL cosPi6 = native_cos(native_divide(M_PI_F, 6.0f));
	REAL yFloor = fabs(zc.y - size * floor(native_divide(zc.y, size) + 0.5f));
	REAL xFloor = fabs(zc.x
										 - size * native_divide(1.5f, cosPi6)
												 * floor(native_divide(native_divide(zc.x, size), 1.5f) * cosPi6 + 0.5f));
	REAL gridMax = max(yFloor, xFloor * cosPi6 + yFloor * native_sin(native_divide(M_PI_F, 6.0f)));
	REAL gridMin = min(gridMax - size * 0.5f, yFloor);

	if (!fractal->transformCommon.functionEnabledJFalse)
		hexD = native_sqrt(mad(gridMin, gridMin, zc.z * zc.z));
	else
		hexD = max(fabs(gridMin), fabs(zc.z));

	hexD -= fractal->transformCommon.offset0005;

	aux->dist = min(aux->dist, native_divide(hexD, aux->DE));
	return z;
}
