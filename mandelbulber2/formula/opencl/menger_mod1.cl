/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Menger Sponge formula modified by Mclarekin
 * from code by Knighty
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void MengerMod1Iteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	*z = fabs(*z);
	if (z->x - z->y < 0.0f)
	{
		float temp = z->y;
		z->y = z->x;
		z->x = temp;
	}
	if (z->x - z->z < 0.0f)
	{
		float temp = z->z;
		z->z = z->x;
		z->x = temp;
	}
	if (z->y - z->z < 0.0f)
	{
		float temp = z->z;
		z->z = z->y;
		z->y = temp;
	}
	*z *= fractal->transformCommon.scale3;
	z->x -= 2.0f * fractal->transformCommon.constantMultiplier111.x;
	z->y -= 2.0f * fractal->transformCommon.constantMultiplier111.y;
	if (z->z > 1.0f) z->z -= 2.0f * fractal->transformCommon.constantMultiplier111.z;

	aux->DE *= fractal->transformCommon.scale3;

	if (fractal->transformCommon.rotationEnabled && aux->i >= fractal->transformCommon.startIterations
			&& aux->i < fractal->transformCommon.stopIterations)
	{
		*z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, *z);
	}
	*z += fractal->transformCommon.additionConstant000;
	if (fractal->transformCommon.functionEnabledxFalse
			&& aux->i >= fractal->transformCommon.startIterationsA
			&& aux->i < fractal->transformCommon.stopIterationsA) // box offset
	{
		float4 temp = *z;
		z->x = copysign(fractal->transformCommon.additionConstantA000.x, z->x) + z->x;
		z->y = copysign(fractal->transformCommon.additionConstantA000.y, z->y) + z->y;
		z->z = copysign(fractal->transformCommon.additionConstantA000.z, z->z) + z->z;

		if (fractal->transformCommon.functionEnabledFalse)
		{
			float tempL = length(temp);
			// if (tempL < 1e-21f) tempL = 1e-21f;
			float avgScale = native_divide(length(*z), tempL);
			aux->r_dz *= avgScale;
			aux->DE = mad(aux->DE, avgScale, 1.0f);
		}
	}

	if (fractal->transformCommon.functionEnabledFalse)
	{
		float4 zA = (aux->i == fractal->transformCommon.intA) ? *z : (float4){};
		float4 zB = (aux->i == fractal->transformCommon.intB) ? *z : (float4){};

		*z = (*z * fractal->transformCommon.scale1) + (zA * fractal->transformCommon.offset)
				 + (zB * fractal->transformCommon.offset0);
		aux->DE *= fractal->transformCommon.scale1;
	}
}
#else
void MengerMod1Iteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	*z = fabs(*z);
	if (z->x - z->y < 0.0)
	{
		double temp = z->y;
		z->y = z->x;
		z->x = temp;
	}
	if (z->x - z->z < 0.0)
	{
		double temp = z->z;
		z->z = z->x;
		z->x = temp;
	}
	if (z->y - z->z < 0.0)
	{
		double temp = z->z;
		z->z = z->y;
		z->y = temp;
	}
	*z *= fractal->transformCommon.scale3;
	z->x -= 2.0 * fractal->transformCommon.constantMultiplier111.x;
	z->y -= 2.0 * fractal->transformCommon.constantMultiplier111.y;
	if (z->z > 1.0) z->z -= 2.0 * fractal->transformCommon.constantMultiplier111.z;

	aux->DE *= fractal->transformCommon.scale3;

	if (fractal->transformCommon.rotationEnabled && aux->i >= fractal->transformCommon.startIterations
			&& aux->i < fractal->transformCommon.stopIterations)
	{
		*z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, *z);
	}
	*z += fractal->transformCommon.additionConstant000;
	if (fractal->transformCommon.functionEnabledxFalse
			&& aux->i >= fractal->transformCommon.startIterationsA
			&& aux->i < fractal->transformCommon.stopIterationsA) // box offset
	{
		double4 temp = *z;
		z->x = copysign(fractal->transformCommon.additionConstantA000.x, z->x) + z->x;
		z->y = copysign(fractal->transformCommon.additionConstantA000.y, z->y) + z->y;
		z->z = copysign(fractal->transformCommon.additionConstantA000.z, z->z) + z->z;

		if (fractal->transformCommon.functionEnabledFalse)
		{
			double tempL = length(temp);
			// if (tempL < 1e-21) tempL = 1e-21;
			double avgScale = native_divide(length(*z), tempL);
			aux->r_dz *= avgScale;
			aux->DE = aux->DE * avgScale + 1.0;
		}
	}

	if (fractal->transformCommon.functionEnabledFalse)
	{
		double4 zA = (aux->i == fractal->transformCommon.intA) ? *z : (double4){};
		double4 zB = (aux->i == fractal->transformCommon.intB) ? *z : (double4){};

		*z = (*z * fractal->transformCommon.scale1) + (zA * fractal->transformCommon.offset)
				 + (zB * fractal->transformCommon.offset0);
		aux->DE *= fractal->transformCommon.scale1;
	}
}
#endif
