/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * benesiFastPwr2PineTree 3D
 * @reference
 * http://www.fractalforums.com/new-theories-and-research/
 * do-m3d-formula-have-to-be-distance-estimation-formulas/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void BenesiPineTreeIteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	float4 c = aux->const_c;

	float4 temp = *z;
	aux->r = length(*z);
	*z *= *z;
	float t = 2.0f * temp.x;
	if (z->y + z->z > 0.0f)
		t = native_divide(t, native_sqrt(z->y + z->z));
	else
		t = 1.0f;

	z->x = mad(fractal->transformCommon.constantMultiplier100.x, c.x, (z->x - z->y - z->z));
	z->z = mad(fractal->transformCommon.constantMultiplier100.y, c.y, (t * (z->y - z->z)));
	z->y = mad(fractal->transformCommon.constantMultiplier100.z, c.z, (2.0f * t * temp.y * temp.z));
	aux->r_dz = mad(aux->r * aux->r_dz, 2.0f, 1.0f);
}
#else
void BenesiPineTreeIteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	double4 c = aux->const_c;

	double4 temp = *z;
	aux->r = length(*z);
	*z *= *z;
	double t = 2.0 * temp.x;
	if (z->y + z->z > 0.0)
		t = native_divide(t, native_sqrt(z->y + z->z));
	else
		t = 1.0;

	z->x = mad(fractal->transformCommon.constantMultiplier100.x, c.x, (z->x - z->y - z->z));
	z->z = mad(fractal->transformCommon.constantMultiplier100.y, c.y, (t * (z->y - z->z)));
	z->y = mad(fractal->transformCommon.constantMultiplier100.z, c.z, (2.0 * t * temp.y * temp.z));
	aux->r_dz = aux->r * aux->r_dz * 2.0 + 1.0;
}
#endif
