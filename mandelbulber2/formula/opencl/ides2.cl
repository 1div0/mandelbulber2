/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * From M3D. A formula made by Trafassel, the original Ide's Formula thread
 * @reference http://www.fractalforums.com/videos/formula-21-%28julia-set-interpretation%29/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 Ides2Iteration(float4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(aux);

	float4 z2 = z * z;
	float4 newZ;
	newZ.x = mad(fractal->transformCommon.constantMultiplier121.x, z2.x,
		-fractal->transformCommon.additionConstant0555.x * (z2.y + z2.z));
	newZ.y = fractal->transformCommon.constantMultiplier121.y * z.x * z.y * z.z;
	newZ.z = mad(fractal->transformCommon.constantMultiplier121.z, z2.z,
		-fractal->transformCommon.additionConstant0555.z * (z2.x + z2.y));
	newZ.w = z.w;
	z = newZ + z;
	return z;
}
#else
double4 Ides2Iteration(double4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(aux);

	double4 z2 = z * z;
	double4 newZ;
	newZ.x = mad(fractal->transformCommon.constantMultiplier121.x, z2.x,
		-fractal->transformCommon.additionConstant0555.x * (z2.y + z2.z));
	newZ.y = fractal->transformCommon.constantMultiplier121.y * z.x * z.y * z.z;
	newZ.z = mad(fractal->transformCommon.constantMultiplier121.z, z2.z,
		-fractal->transformCommon.additionConstant0555.z * (z2.x + z2.y));
	newZ.w = z.w;
	z = newZ + z;
	return z;
}
#endif
