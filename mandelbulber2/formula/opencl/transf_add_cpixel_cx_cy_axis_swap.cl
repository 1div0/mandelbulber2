/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Adds Cpixel constant to z vector, swapping the Cpixel vector x and y axes
 * disable swap for normal mode
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void TransfAddCpixelCxCyAxisSwapIteration(
	float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	float4 c = aux->const_c;

	float4 tempC = c;
	if (fractal->transformCommon.functionEnabled)
	{
		if (fractal->transformCommon.alternateEnabledFalse) // alternate
		{
			tempC = aux->c;
			tempC = (float4){tempC.y, tempC.x, tempC.z, tempC.w};
			aux->c = tempC;
		}
		else
		{
			tempC = (float4){c.y, c.x, c.z, c.w};
		}
	}
	*z += tempC * fractal->transformCommon.constantMultiplier111;
}
#else
void TransfAddCpixelCxCyAxisSwapIteration(
	double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	double4 c = aux->const_c;

	double4 tempC = c;
	if (fractal->transformCommon.functionEnabled)
	{
		if (fractal->transformCommon.alternateEnabledFalse) // alternate
		{
			tempC = aux->c;
			tempC = (double4){tempC.y, tempC.x, tempC.z, tempC.w};
			aux->c = tempC;
		}
		else
		{
			tempC = (double4){c.y, c.x, c.z, c.w};
		}
	}
	*z += tempC * fractal->transformCommon.constantMultiplier111;
}
#endif
