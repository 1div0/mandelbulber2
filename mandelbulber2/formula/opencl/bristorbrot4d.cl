/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Bristorbrot formula 4D
 * @reference https://code.google.com/archive/p/fractaldimension/
 * by Doug Bristor
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 Bristorbrot4dIteration(float4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	aux->r_dz = aux->r_dz * 2.0f * aux->r;
	float newx = mad(-z4D->z, z4D->z, mad(z4D->x, z4D->x, -z4D->y * z4D->y)) - z4D->w * z4D->w;
	float newy = z4D->y * (2.0f * z4D->x - z4D->z - z4D->w);
	float newz = z4D->z * (2.0f * z4D->x + z4D->y - z4D->w);
	float neww = z4D->w * (2.0f * z4D->x + z4D->y + z4D->z);
	z4D->x = newx;
	z4D->y = newy;
	z4D->z = newz;
	z4D->w = neww;

	*z4D += fractal->transformCommon.additionConstant0000;
	return z;
}
#else
double4 Bristorbrot4dIteration(double4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	aux->r_dz = aux->r_dz * 2.0 * aux->r;
	double newx = mad(-z4D->z, z4D->z, mad(z4D->x, z4D->x, -z4D->y * z4D->y)) - z4D->w * z4D->w;
	double newy = z4D->y * (2.0 * z4D->x - z4D->z - z4D->w);
	double newz = z4D->z * (2.0 * z4D->x + z4D->y - z4D->w);
	double neww = z4D->w * (2.0 * z4D->x + z4D->y + z4D->z);
	z4D->x = newx;
	z4D->y = newy;
	z4D->z = newz;
	z4D->w = neww;

	*z4D += fractal->transformCommon.additionConstant0000;
	return z;
}
#endif
