/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * JosLeys-Kleinian formula
 * @reference
 * http://www.fractalforums.com/3d-fractal-generation/an-escape-tim-algorithm-for-kleinian-group-limit-sets/msg98248/#msg98248
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 JosKleinianIteration(float4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	float a = fractal->transformCommon.foldingValue;
	float b = fractal->transformCommon.offset;
	float f = sign(b);

	float4 box_size = fractal->transformCommon.offset111;

	float3 box1 = (float3){2.0f * box_size.x, a * box_size.y, 2.0f * box_size.z};
	float3 box2 = (float3){-box_size.x, -box_size.y + 1.0f, -box_size.z};
	float3 wrapped = wrap(z.xyz, box1, box2);

	z = (float4){wrapped.x, wrapped.y, wrapped.z, z.w};

	// If above the separation line, rotate by 180deg about (-b/2, a/2)
	if (z.y
			>= a * (0.5f
							 + 0.2f * native_sin(f * M_PI_F * native_divide((mad(b, 0.5f, z.x)), box_size.x))))
		z = (float4){-b, a, 0.f, z.w} - z; // z.xy = vec2(-b, a) - z.xy;

	float z2 = dot(z, z);

	float4 colorVector = (float4){z.x, z.y, z.z, z2};
	aux->color = min(aux->color, length(colorVector)); // For coloring

	float iR = native_recip(z2);
	z *= -iR;
	z.x = -b - z.x;
	z.y = a + z.y;
	aux->pseudoKleinianDE *= iR;
	return z;
}
#else
double4 JosKleinianIteration(double4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	double a = fractal->transformCommon.foldingValue;
	double b = fractal->transformCommon.offset;
	double f = sign(b);

	double4 box_size = fractal->transformCommon.offset111;

	double3 box1 = (double3){2.0 * box_size.x, a * box_size.y, 2.0 * box_size.z};
	double3 box2 = (double3){-box_size.x, -box_size.y + 1.0, -box_size.z};
	double3 wrapped = wrap(z.xyz, box1, box2);

	z = (double4){wrapped.xyz, z.w};

	// If above the separation line, rotate by 180deg about (-b/2, a/2)
	if (z.y >= a * (0.5 + 0.2 * native_sin(f * M_PI * native_divide((z.x + b * 0.5), box_size.x))))
		z = (double4)
		{-b, a, 0., z.w) - z; // z.xy = vec2(-b, a) - z.xy;

	double z2 = dot(z, z
		};

	double4 colorVector = (double4){z.x, z.y, z.z, z2};
	aux->color = min(aux->color, length(colorVector)); // For coloring

	double iR = 1.0 / z2;
	z *= -iR;
	z.x = -b - z.x;
	z.y = a + z.y;
	aux->pseudoKleinianDE *= iR;
	return z;
}
#endif
