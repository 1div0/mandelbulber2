/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Xenodreambuie
 * @reference
 * http://www.fractalforums.com/3d-fractal-generation/true-3d-mandlebrot-type-fractal/273/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void XenodreambuieIteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	float rp = native_powr(aux->r, fractal->bulb.power - 1.0f);
	aux->r_dz = mad(rp * aux->r_dz, fractal->bulb.power, 1.0f);
	rp *= aux->r;

	float th = atan2(z->y, z->x) + fractal->bulb.betaAngleOffset;
	float ph = acos(native_divide(z->z, aux->r)) + fractal->bulb.alphaAngleOffset;

	if (fabs(ph) > 0.5f * M_PI) ph = copysign(M_PI, ph) - ph;

	z->x = rp * native_cos(th * fractal->bulb.power) * native_sin(ph * fractal->bulb.power);
	z->y = rp * native_sin(th * fractal->bulb.power) * native_sin(ph * fractal->bulb.power);
	z->z = rp * native_cos(ph * fractal->bulb.power);
}
#else
void XenodreambuieIteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	double rp = native_powr(aux->r, fractal->bulb.power - 1.0);
	aux->r_dz = rp * aux->r_dz * fractal->bulb.power + 1.0;
	rp *= aux->r;

	double th = atan2(z->y, z->x) + fractal->bulb.betaAngleOffset;
	double ph = acos(native_divide(z->z, aux->r)) + fractal->bulb.alphaAngleOffset;

	if (fabs(ph) > 0.5 * M_PI) ph = copysign(M_PI, ph) - ph;

	z->x = rp * native_cos(th * fractal->bulb.power) * native_sin(ph * fractal->bulb.power);
	z->y = rp * native_sin(th * fractal->bulb.power) * native_sin(ph * fractal->bulb.power);
	z->z = rp * native_cos(ph * fractal->bulb.power);
}
#endif
