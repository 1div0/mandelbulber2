/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * MsltoeToroidalMulti
 * @reference http://www.fractalforums.com/theory/toroidal-coordinates/msg9428/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 MsltoeToroidalMultiIteration(float4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (fractal->transformCommon.functionEnabledFalse) // pre-scale
	{
		z *= fractal->transformCommon.scale3D111;
		aux->r_dz *= native_divide(length(z), aux->r);
		aux->DE = aux->DE * native_divide(length(z), aux->r) + 1.0f;
	}
	// Toroidal bulb multi
	float th0 = fractal->bulb.betaAngleOffset;
	float ph0 = fractal->bulb.alphaAngleOffset;
	float v1, v2, v3;
	switch (fractal->sinTan2Trig.orderOfZYX)
	{
		case multi_OrderOfZYXCl_zyx:
		default:
			v1 = z.z;
			v2 = z.y;
			v3 = z.x;
			break;
		case multi_OrderOfZYXCl_zxy:
			v1 = z.z;
			v2 = z.x;
			v3 = z.y;
			break;
		case multi_OrderOfZYXCl_yzx:
			v1 = z.y;
			v2 = z.z;
			v3 = z.x;
			break;
		case multi_OrderOfZYXCl_yxz:
			v1 = z.y;
			v2 = z.x;
			v3 = z.z;
			break;
		case multi_OrderOfZYXCl_xzy:
			v1 = z.x;
			v2 = z.z;
			v3 = z.y;
			break;
		case multi_OrderOfZYXCl_xyz:
			v1 = z.x;
			v2 = z.y;
			v3 = z.z;
			break;
	}

	switch (fractal->sinTan2Trig.atan2OrAtan)
	{
		case multi_atan2OrAtanCl_atan2: ph0 += atan2(v2, v3); break;
		case multi_atan2OrAtanCl_atan: ph0 += atan(native_divide(v2, v3)); break;
	}

	float r1 = fractal->transformCommon.minR05;
	float x1 = r1 * native_cos(ph0);
	float y1 = r1 * native_sin(ph0);

	aux->r = mad((z.x - x1), (z.x - x1), (z.y - y1) * (z.y - y1)) + z.z * z.z; //+ 1e-061f

	float sqrT = aux->r;
	if (fractal->transformCommon.functionEnabledAy) // sqrt
	{
		sqrT = native_sqrt(aux->r);
	}

	switch (fractal->sinTan2Trig.asinOrAcos)
	{
		case multi_asinOrAcosCl_asin: th0 += asin(native_divide(v1, sqrT)); break;
		case multi_asinOrAcosCl_acos: th0 += acos(native_divide(v1, sqrT)); break;
	}

	th0 *= fractal->transformCommon.pwr8; // default 8
	ph0 *= fractal->bulb.power;						// default 9 gives 8 symmetry

	float rp = native_powr(aux->r, fractal->transformCommon.pwr4);

	float costh = native_cos(th0);
	float sinth = native_sin(th0);

	if (fractal->transformCommon.functionEnabledzFalse)
	{ // cosine mode
		z.x = (mad(rp, sinth, r1)) * native_sin(ph0);
		z.y = (mad(rp, sinth, r1)) * native_cos(ph0);
		z.z = -rp * costh;
	}
	else
	{ // sine mode default
		z.x = (mad(rp, costh, r1)) * native_cos(ph0);
		z.y = (mad(rp, costh, r1)) * native_sin(ph0);
		z.z = -rp * sinth;
	}

	if (fractal->analyticDE.enabledFalse)
	{ // analytic log DE adjustment
		if (fractal->analyticDE.enabledAuxR2False) aux->r_dz *= aux->r_dz;
		aux->r_dz = mad(native_powr(aux->r, fractal->transformCommon.pwr4 - fractal->analyticDE.offset1)
											* fractal->transformCommon.pwr4 * fractal->analyticDE.scale1,
			aux->r_dz, fractal->analyticDE.offset2);
	}
	else
	{ // default, i.e. scale1 & offset1 & offset2 = 1.0f
		aux->r_dz =
			mad(native_powr(aux->r, fractal->transformCommon.pwr4 - 1.0f) * aux->r_dz * aux->r_dz,
				fractal->transformCommon.pwr4, 1.0f);
	}

	if (fractal->transformCommon.functionEnabledAxFalse) // spherical offset
	{
		float lengthTempZ = length(-z);
		// if (lengthTempZ > -1e-21f) lengthTempZ = -1e-21f;   //  z is neg.)
		z *= 1.0f + native_divide(fractal->transformCommon.offset, lengthTempZ);
		z *= fractal->transformCommon.scale;
		aux->DE = mad(aux->DE, fabs(fractal->transformCommon.scale), 1.0f);
		aux->r_dz *= fabs(fractal->transformCommon.scale);
	}
	// then add Cpixel constant vector
	return z;
}
#else
double4 MsltoeToroidalMultiIteration(double4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (fractal->transformCommon.functionEnabledFalse) // pre-scale
	{
		z *= fractal->transformCommon.scale3D111;
		aux->r_dz *= native_divide(length(z), aux->r);
		aux->DE = aux->DE * native_divide(length(z), aux->r) + 1.0;
	}
	// Toroidal bulb multi
	double th0 = fractal->bulb.betaAngleOffset;
	double ph0 = fractal->bulb.alphaAngleOffset;
	double v1, v2, v3;
	switch (fractal->sinTan2Trig.orderOfZYX)
	{
		case multi_OrderOfZYXCl_zyx:
		default:
			v1 = z.z;
			v2 = z.y;
			v3 = z.x;
			break;
		case multi_OrderOfZYXCl_zxy:
			v1 = z.z;
			v2 = z.x;
			v3 = z.y;
			break;
		case multi_OrderOfZYXCl_yzx:
			v1 = z.y;
			v2 = z.z;
			v3 = z.x;
			break;
		case multi_OrderOfZYXCl_yxz:
			v1 = z.y;
			v2 = z.x;
			v3 = z.z;
			break;
		case multi_OrderOfZYXCl_xzy:
			v1 = z.x;
			v2 = z.z;
			v3 = z.y;
			break;
		case multi_OrderOfZYXCl_xyz:
			v1 = z.x;
			v2 = z.y;
			v3 = z.z;
			break;
	}

	switch (fractal->sinTan2Trig.atan2OrAtan)
	{
		case multi_atan2OrAtanCl_atan2: ph0 += atan2(v2, v3); break;
		case multi_atan2OrAtanCl_atan: ph0 += atan(native_divide(v2, v3)); break;
	}

	double r1 = fractal->transformCommon.minR05;
	double x1 = r1 * native_cos(ph0);
	double y1 = r1 * native_sin(ph0);

	aux->r = mad((z.x - x1), (z.x - x1), (z.y - y1) * (z.y - y1)) + z.z * z.z; //+ 1e-061

	double sqrT = aux->r;
	if (fractal->transformCommon.functionEnabledAy) // sqrt
	{
		sqrT = native_sqrt(aux->r);
	}

	switch (fractal->sinTan2Trig.asinOrAcos)
	{
		case multi_asinOrAcosCl_asin: th0 += asin(native_divide(v1, sqrT)); break;
		case multi_asinOrAcosCl_acos: th0 += acos(native_divide(v1, sqrT)); break;
	}

	th0 *= fractal->transformCommon.pwr8; // default 8
	ph0 *= fractal->bulb.power;						// default 9 gives 8 symmetry

	double rp = native_powr(aux->r, fractal->transformCommon.pwr4);

	double costh = native_cos(th0);
	double sinth = native_sin(th0);

	if (fractal->transformCommon.functionEnabledzFalse)
	{ // cosine mode
		z.x = (mad(rp, sinth, r1)) * native_sin(ph0);
		z.y = (mad(rp, sinth, r1)) * native_cos(ph0);
		z.z = -rp * costh;
	}
	else
	{ // sine mode default
		z.x = (mad(rp, costh, r1)) * native_cos(ph0);
		z.y = (mad(rp, costh, r1)) * native_sin(ph0);
		z.z = -rp * sinth;
	}

	if (fractal->analyticDE.enabledFalse)
	{ // analytic log DE adjustment
		if (fractal->analyticDE.enabledAuxR2False) aux->r_dz *= aux->r_dz;
		aux->r_dz = mad(native_powr(aux->r, fractal->transformCommon.pwr4 - fractal->analyticDE.offset1)
											* fractal->transformCommon.pwr4 * fractal->analyticDE.scale1,
			aux->r_dz, fractal->analyticDE.offset2);
	}
	else
	{ // default, i.e. scale1 & offset1 & offset2 = 1.0
		aux->r_dz = native_powr(aux->r, fractal->transformCommon.pwr4 - 1.0) * aux->r_dz * aux->r_dz
									* fractal->transformCommon.pwr4
								+ 1.0;
	}

	if (fractal->transformCommon.functionEnabledAxFalse) // spherical offset
	{
		double lengthTempZ = length(-z);
		// if (lengthTempZ > -1e-21) lengthTempZ = -1e-21;   //  z is neg.)
		z *= 1.0 + native_divide(fractal->transformCommon.offset, lengthTempZ);
		z *= fractal->transformCommon.scale;
		aux->DE = aux->DE * fabs(fractal->transformCommon.scale) + 1.0;
		aux->r_dz *= fabs(fractal->transformCommon.scale);
	}
	// then add Cpixel constant vector
	return z;
}
#endif
