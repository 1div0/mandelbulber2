/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2018 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * quadratic iteration in real or imaginary scator algebra
 * @reference
 * http://www.fractalforums.com/new-theories-and-research/
 * ix-possibly-the-holy-grail-fractal-%28in-fff-lore%29
 * https://luz.izt.uam.mx/drupal/en/fractals/ix
 * @author Manuel Fernandez-Guasti
 * This formula contains aux.DE

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the function "ScatorPower2Iteration" in the file fractal_formulas.cpp
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 ScatorPower2Iteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	// log DE calc
	if (fractal->analyticDE.enabled)
	{
		REAL r = aux->r; // = native_sqrt(z2.x + z2.y + z2.z + native_divide((z2.y * z2.z), z2.x));
		if (fractal->transformCommon.functionEnabledXFalse)
		{
			r = length(z);
			// r = max(fabs(z.z), max(fabs(z.y), fabs(z.x)));
			// r = native_sqrt(max(z2.x + z2.y, max(z2.y + z2.z, z2.x + z2.z)));
		}
		aux->DE = mad(r * aux->DE * 2.0f, fractal->analyticDE.scale1, fractal->analyticDE.offset1);
	}
	// Scator real enabled
	REAL4 zz = z * z;
	REAL4 newZ = z;
	if (fractal->transformCommon.functionEnabledFalse)
	{ // scator imag
		newZ.x = zz.x - zz.y - zz.z;
		newZ.y = z.x * z.y;
		newZ.z = z.x * z.z;

		newZ.x += native_divide((zz.y * zz.z), zz.x);
		newZ.y *= (1.0f - native_divide(zz.z, zz.x));
		newZ.z *= (1.0f - native_divide(zz.y, zz.x));
		newZ *= fractal->transformCommon.constantMultiplier122;
	}
	else
	{ // scator real
		newZ.x = zz.x + zz.y + zz.z;
		newZ.y = z.x * z.y;
		newZ.z = z.x * z.z;

		newZ.x += native_divide((zz.y * zz.z), zz.x);
		newZ.y *= (1.0f + native_divide(zz.z, zz.x));
		newZ.z *= (1.0f + native_divide(zz.y, zz.x));
		newZ *= fractal->transformCommon.constantMultiplier122;
	}
	z = newZ;
	return z;
}