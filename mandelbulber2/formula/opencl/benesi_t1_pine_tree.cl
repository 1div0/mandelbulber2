/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * benesiT1PineTree 3D
 * @reference
 * http://www.fractalforums.com/new-theories-and-research/
 * do-m3d-formula-have-to-be-distance-estimation-formulas/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void BenesiT1PineTreeIteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	float4 c = aux->const_c;

	if (fractal->transformCommon.benesiT1Enabled && aux->i >= fractal->transformCommon.startIterations
			&& aux->i < fractal->transformCommon.stopIterations)
	{
		float tempXZ = mad(z->x, SQRT_2_3, -z->z * SQRT_1_3);
		*z = (float4){(tempXZ - z->y) * SQRT_1_2, (tempXZ + z->y) * SQRT_1_2,
			z->x * SQRT_1_3 + z->z * SQRT_2_3, z->w};

		float4 temp = *z;
		float tempL = length(temp);
		*z = fabs(*z) * fractal->transformCommon.scale3D222;
		// if (tempL < 1e-21f) tempL = 1e-21f;
		float avgScale = native_divide(length(*z), tempL);
		aux->r_dz *= avgScale;

		if (fractal->transformCommon.rotationEnabled)
		{
			*z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, *z);
		}

		tempXZ = (z->y + z->x) * SQRT_1_2;

		*z = (float4){z->z * SQRT_1_3 + tempXZ * SQRT_2_3, (z->y - z->x) * SQRT_1_2,
			z->z * SQRT_2_3 - tempXZ * SQRT_1_3, z->w};
		*z = *z - fractal->transformCommon.offset200;
	}

	if (fractal->transformCommon.addCpixelEnabled
			&& aux->i >= fractal->transformCommon.startIterationsC
			&& aux->i < fractal->transformCommon.stopIterationsC)
	{
		float4 temp = *z;
		aux->r = length(*z);
		*z *= *z;
		float t = 2.0f * temp.x;
		if (z->y + z->z > 0.0f)
			t = native_divide(t, native_sqrt(z->y + z->z));
		else
			t = 1.0f;
		float4 tempC = c;
		if (fractal->transformCommon.alternateEnabledFalse) // alternate
		{
			tempC = (float4){aux->c.x, aux->c.z, aux->c.y, aux->c.w};
			aux->c = tempC;
		}
		else
		{
			tempC = (float4){c.x, c.z, c.y, c.w};
		}
		z->x = mad(fractal->transformCommon.constantMultiplier100.x, tempC.x, (z->x - z->y - z->z));
		z->z = mad(fractal->transformCommon.constantMultiplier100.y, tempC.z, (t * (z->y - z->z)));
		z->y =
			mad(fractal->transformCommon.constantMultiplier100.z, tempC.y, (2.0f * t * temp.y * temp.z));
		aux->r_dz = mad(aux->r * aux->r_dz, 2.0f, 1.0f);
	}

	if (fractal->transformCommon.functionEnabledBxFalse
			&& aux->i >= fractal->transformCommon.startIterationsD
			&& aux->i < fractal->transformCommon.stopIterationsD)
	{
		*z = (float4){z->x * native_cos(z->y * fractal->transformCommon.scale1),
					 z->x * native_sin(z->y * fractal->transformCommon.scale1),
					 z->z * fractal->transformCommon.scaleC1, z->w}
				 * fractal->transformCommon.scaleA1;
		aux->r_dz *= fabs(fractal->transformCommon.scaleA1);
	}

	if (fractal->transformCommon.juliaMode)
	{
		z->x += fractal->transformCommon.offset000.x;
		z->y += fractal->transformCommon.offset000.y;
		z->z += fractal->transformCommon.offset000.z;
	}
}
#else
void BenesiT1PineTreeIteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	double4 c = aux->const_c;

	if (fractal->transformCommon.benesiT1Enabled && aux->i >= fractal->transformCommon.startIterations
			&& aux->i < fractal->transformCommon.stopIterations)
	{
		double tempXZ = mad(z->x, SQRT_2_3, -z->z * SQRT_1_3);
		*z = (double4){(tempXZ - z->y) * SQRT_1_2, (tempXZ + z->y) * SQRT_1_2,
			z->x * SQRT_1_3 + z->z * SQRT_2_3, z->w};

		double4 temp = *z;
		double tempL = length(temp);
		*z = fabs(*z) * fractal->transformCommon.scale3D222;
		// if (tempL < 1e-21) tempL = 1e-21;
		double avgScale = native_divide(length(*z), tempL);
		aux->r_dz *= avgScale;

		if (fractal->transformCommon.rotationEnabled)
		{
			*z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, *z);
		}

		tempXZ = (z->y + z->x) * SQRT_1_2;

		*z = (double4){z->z * SQRT_1_3 + tempXZ * SQRT_2_3, (z->y - z->x) * SQRT_1_2,
			z->z * SQRT_2_3 - tempXZ * SQRT_1_3, z->w};
		*z = *z - fractal->transformCommon.offset200;
	}

	if (fractal->transformCommon.addCpixelEnabled
			&& aux->i >= fractal->transformCommon.startIterationsC
			&& aux->i < fractal->transformCommon.stopIterationsC)
	{
		double4 temp = *z;
		aux->r = length(*z);
		*z *= *z;
		double t = 2.0 * temp.x;
		if (z->y + z->z > 0.0)
			t = native_divide(t, native_sqrt(z->y + z->z));
		else
			t = 1.0;
		double4 tempC = c;
		if (fractal->transformCommon.alternateEnabledFalse) // alternate
		{
			tempC = (double4){aux->c.x, aux->c.z, aux->c.y, aux->c.w};
			aux->c = tempC;
		}
		else
		{
			tempC = (double4){c.x, c.z, c.y, c.w};
		}
		z->x = mad(fractal->transformCommon.constantMultiplier100.x, tempC.x, (z->x - z->y - z->z));
		z->z = mad(fractal->transformCommon.constantMultiplier100.y, tempC.z, (t * (z->y - z->z)));
		z->y =
			mad(fractal->transformCommon.constantMultiplier100.z, tempC.y, (2.0 * t * temp.y * temp.z));
		aux->r_dz = aux->r * aux->r_dz * 2.0 + 1.0;
	}

	if (fractal->transformCommon.functionEnabledBxFalse
			&& aux->i >= fractal->transformCommon.startIterationsD
			&& aux->i < fractal->transformCommon.stopIterationsD)
	{
		*z = (double4){z->x * native_cos(z->y * fractal->transformCommon.scale1),
					 z->x * native_sin(z->y * fractal->transformCommon.scale1),
					 z->z * fractal->transformCommon.scaleC1, z->w}
				 * fractal->transformCommon.scaleA1;
		aux->r_dz *= fabs(fractal->transformCommon.scaleA1);
	}

	if (fractal->transformCommon.juliaMode)
	{
		z->x += fractal->transformCommon.offset000.x;
		z->y += fractal->transformCommon.offset000.y;
		z->z += fractal->transformCommon.offset000.z;
	}
}
#endif
