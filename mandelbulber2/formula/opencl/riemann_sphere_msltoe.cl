/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * RiemannSphereMsltoe
 * @reference http://www.fractalforums.com/the-3d-mandelbulb/
 * riemann-fractals/msg33500/#msg33500
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void RiemannSphereMsltoeIteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(aux);

	if (fractal->transformCommon.rotationEnabled)
		*z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, *z);

	float r = length(*z);
	// if (r < 1e-21f) r = 1e-21f;
	*z *= native_divide(fractal->transformCommon.scale, r);

	float q = native_recip((1.0f - z->z));
	float s = z->x * q;
	float t = z->y * q;

	float p = 1.0f + mad(s, s, t * t);

	s = fabs(native_sin(M_PI * s));
	t = fabs(native_sin(M_PI * t));

	r *= r;
	// if (r < 1e-21f)
	//	r = 1e-21f;

	if (p > 36) p = 36; // problem with native_powr()
	r = -0.25f + native_powr(r, p);

	z->x = 2.0f * s;
	z->y = 2.0f * t;
	z->z = -1.0f + mad(s, s, t * t);
	*z *= native_divide(r, (1.0f + s * s + t * t));

	*z += fractal->transformCommon.additionConstant000;
}
#else
void RiemannSphereMsltoeIteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(aux);

	if (fractal->transformCommon.rotationEnabled)
		*z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, *z);

	double r = length(*z);
	// if (r < 1e-21) r = 1e-21;
	*z *= native_divide(fractal->transformCommon.scale, r);

	double q = 1.0 / (1.0 - z->z);
	double s = z->x * q;
	double t = z->y * q;

	double p = 1.0 + mad(s, s, t * t);

	s = fabs(native_sin(M_PI * s));
	t = fabs(native_sin(M_PI * t));

	r *= r;
	// if (r < 1e-21)
	//	r = 1e-21;

	if (p > 36) p = 36; // problem with native_powr()
	r = -0.25 + native_powr(r, p);

	z->x = 2.0 * s;
	z->y = 2.0 * t;
	z->z = -1.0 + mad(s, s, t * t);
	*z *= native_divide(r, (1.0 + s * s + t * t));

	*z += fractal->transformCommon.additionConstant000;
}
#endif
