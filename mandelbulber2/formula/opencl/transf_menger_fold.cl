/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Transform Menger Fold
 * Menger Sponge formula created by Knighty
 * @reference
 * http://www.fractalforums.com/ifs-iterated-function-systems/kaleidoscopic-(escape-time-ifs)/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void TransfMengerFoldIteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (fractal->transformCommon.functionEnabledx)
	{ // fabs() and menger fold
		*z = fabs(*z + fractal->transformCommon.additionConstantA000);
		if (z->x - z->y < 0.0f)
		{
			float temp = z->y;
			z->y = z->x;
			z->x = temp;
		}
		if (z->x - z->z < 0.0f)
		{
			float temp = z->z;
			z->z = z->x;
			z->x = temp;
		}
		if (z->y - z->z < 0.0f)
		{
			float temp = z->z;
			z->z = z->y;
			z->y = temp;
		}
	}
	if (fractal->transformCommon.functionEnabledy)
	{ // menger scales and offsets
		*z *= fractal->transformCommon.scale3;
		z->x -= 2.0f * fractal->transformCommon.constantMultiplier111.x;
		z->y -= 2.0f * fractal->transformCommon.constantMultiplier111.y;
		if (fractal->transformCommon.functionEnabled)
		{
			if (z->z > 1.0f) // z->z < 1.0f  z->z = z->z
				z->z -= 2.0f * fractal->transformCommon.constantMultiplier111.z;
		}
		else
		{
			z->z -= 2.0f * fractal->transformCommon.constantMultiplier111.z;
		}
		aux->DE *= fractal->transformCommon.scale3;
	}
}
#else
void TransfMengerFoldIteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (fractal->transformCommon.functionEnabledx)
	{ // fabs() and menger fold
		*z = fabs(*z + fractal->transformCommon.additionConstantA000);
		if (z->x - z->y < 0.0)
		{
			double temp = z->y;
			z->y = z->x;
			z->x = temp;
		}
		if (z->x - z->z < 0.0)
		{
			double temp = z->z;
			z->z = z->x;
			z->x = temp;
		}
		if (z->y - z->z < 0.0)
		{
			double temp = z->z;
			z->z = z->y;
			z->y = temp;
		}
	}
	if (fractal->transformCommon.functionEnabledy)
	{ // menger scales and offsets
		*z *= fractal->transformCommon.scale3;
		z->x -= 2.0 * fractal->transformCommon.constantMultiplier111.x;
		z->y -= 2.0 * fractal->transformCommon.constantMultiplier111.y;
		if (fractal->transformCommon.functionEnabled)
		{
			if (z->z > 1.0) // z->z < 1.0  z->z = z->z
				z->z -= 2.0 * fractal->transformCommon.constantMultiplier111.z;
		}
		else
		{
			z->z -= 2.0 * fractal->transformCommon.constantMultiplier111.z;
		}
		aux->DE *= fractal->transformCommon.scale3;
	}
}
#endif
