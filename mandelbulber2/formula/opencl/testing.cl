/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2019 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Testing
 *

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the function "TestingIteration" in the file fractal_formulas.cpp
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TestingIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{

	// REAL4 oldZ = z;
	// REAL4 zc = z;
	// REAL fillet = fractal->transformCommon.offset0;
	REAL4 boxSize = fractal->transformCommon.offset111;
	REAL yOffset = fractal->transformCommon.offset05;
	// z = fabs(z);
	// z  =  z - boxSize;
	if (fractal->transformCommon.functionEnabled)
		if (z.y > z.x)
		{
			REAL temp = z.x;
			z.x = z.y;
			z.y = temp;
		}
	if (fractal->transformCommon.functionEnabledFalse) z = z - boxSize;
	/*REAL dist = max(z.x, max(z.y, z.z));
	if (dist > 0.0f)
	{
		zc.x = max(zc.x, 0.0f);
		zc.y = max(zc.y, 0.0f);
		zc.z = max(zc.y, 0.0f);
		dist = max(dist, length(zc));
	}*/

	if (z.y < yOffset) z.y = abs(z.y - yOffset) + yOffset;
	z -= fractal->transformCommon.offset000;
	z *= fractal->transformCommon.scale1;
	aux->DE *= fabs(fractal->transformCommon.scale1);
	z -= fractal->transformCommon.offsetA000;
	z = fabs(z);

	// rotation
	if (fractal->transformCommon.functionEnabledRFalse
			&& aux->i >= fractal->transformCommon.startIterationsR
			&& aux->i < fractal->transformCommon.stopIterationsR)
	{
		z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, z);
	}

	REAL4 zc = z;

	if (fractal->analyticDE.enabled)
	{
		if (!fractal->analyticDE.enabledFalse)
			aux->DE = mad(aux->DE, fractal->analyticDE.scale1, fractal->analyticDE.offset0);
		else
		{
			REAL dist = max(z.x, max(z.y, z.z));
			if (dist > 0.0f)
			{
				zc.x = max(z.x, 0.0f);
				zc.y = max(z.y, 0.0f);

				zc.z = max(z.z, 0.0f);
				dist = max(dist, length(zc));
			}
			REAL maxDist = dist;
			maxDist = max(maxDist, length(z));
			aux->DE = aux->DE * native_divide(maxDist, length(z)) * fractal->analyticDE.scale1
								+ fractal->analyticDE.offset0;
			if (fractal->transformCommon.functionEnabledyFalse)
			{
				z = zc;
			}
		}
	}
	return z;
}