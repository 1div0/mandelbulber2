/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Smooth Mandelbox created by Buddhi
 * @reference http://www.fractalforums.com/3d-fractal-generation/mandelbox-with-'smooth'-conditions/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 MandelboxSmoothIteration(float4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	float sm = fractal->mandelbox.sharpness;

	float zk1 = SmoothConditionAGreaterB(z.x, fractal->mandelbox.foldingLimit, sm);
	float zk2 = SmoothConditionALessB(z.x, -fractal->mandelbox.foldingLimit, sm);
	z.x = mad(z.x, (1.0f - zk1), (fractal->mandelbox.foldingValue - z.x) * zk1);
	z.x = mad(z.x, (1.0f - zk2), (-fractal->mandelbox.foldingValue - z.x) * zk2);
	aux->color += (zk1 + zk2) * fractal->mandelbox.color.factor.x;

	float zk3 = SmoothConditionAGreaterB(z.y, fractal->mandelbox.foldingLimit, sm);
	float zk4 = SmoothConditionALessB(z.y, -fractal->mandelbox.foldingLimit, sm);
	z.y = mad(z.y, (1.0f - zk3), (fractal->mandelbox.foldingValue - z.y) * zk3);
	z.y = mad(z.y, (1.0f - zk4), (-fractal->mandelbox.foldingValue - z.y) * zk4);
	aux->color += (zk3 + zk4) * fractal->mandelbox.color.factor.y;

	float zk5 = SmoothConditionAGreaterB(z.z, fractal->mandelbox.foldingLimit, sm);
	float zk6 = SmoothConditionALessB(z.z, -fractal->mandelbox.foldingLimit, sm);
	z.z = mad(z.z, (1.0f - zk5), (fractal->mandelbox.foldingValue - z.z) * zk5);
	z.z = mad(z.z, (1.0f - zk6), (-fractal->mandelbox.foldingValue - z.z) * zk6);
	aux->color += (zk5 + zk6) * fractal->mandelbox.color.factor.z;

	float r2 = dot(z, z);
	float tglad_factor2 = native_divide(fractal->mandelbox.fR2, r2);
	float rk1 = SmoothConditionALessB(r2, fractal->mandelbox.mR2, sm);
	float rk2 = SmoothConditionALessB(r2, fractal->mandelbox.fR2, sm);
	float rk21 = (1.0f - rk1) * rk2;

	z = mad(z, (1.0f - rk1), z * (fractal->mandelbox.mboxFactor1 * rk1));
	z = mad(z, (1.0f - rk21), z * (tglad_factor2 * rk21));
	aux->DE = mad(aux->DE, (1.0f - rk1), aux->DE * (fractal->mandelbox.mboxFactor1 * rk1));
	aux->DE = mad(aux->DE, (1.0f - rk21), aux->DE * (tglad_factor2 * rk21));
	aux->color += rk1 * fractal->mandelbox.color.factorSp1;
	aux->color += rk21 * fractal->mandelbox.color.factorSp2;

	z = Matrix33MulFloat4(fractal->mandelbox.mainRot, z);
	z = z * fractal->mandelbox.scale;

	aux->DE = mad(aux->DE, fabs(fractal->mandelbox.scale), 1.0f);
	return z;
}
#else
double4 MandelboxSmoothIteration(double4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	double sm = fractal->mandelbox.sharpness;

	double zk1 = SmoothConditionAGreaterB(z.x, fractal->mandelbox.foldingLimit, sm);
	double zk2 = SmoothConditionALessB(z.x, -fractal->mandelbox.foldingLimit, sm);
	z.x = mad(z.x, (1.0 - zk1), (fractal->mandelbox.foldingValue - z.x) * zk1);
	z.x = mad(z.x, (1.0 - zk2), (-fractal->mandelbox.foldingValue - z.x) * zk2);
	aux->color += (zk1 + zk2) * fractal->mandelbox.color.factor.x;

	double zk3 = SmoothConditionAGreaterB(z.y, fractal->mandelbox.foldingLimit, sm);
	double zk4 = SmoothConditionALessB(z.y, -fractal->mandelbox.foldingLimit, sm);
	z.y = mad(z.y, (1.0 - zk3), (fractal->mandelbox.foldingValue - z.y) * zk3);
	z.y = mad(z.y, (1.0 - zk4), (-fractal->mandelbox.foldingValue - z.y) * zk4);
	aux->color += (zk3 + zk4) * fractal->mandelbox.color.factor.y;

	double zk5 = SmoothConditionAGreaterB(z.z, fractal->mandelbox.foldingLimit, sm);
	double zk6 = SmoothConditionALessB(z.z, -fractal->mandelbox.foldingLimit, sm);
	z.z = mad(z.z, (1.0 - zk5), (fractal->mandelbox.foldingValue - z.z) * zk5);
	z.z = mad(z.z, (1.0 - zk6), (-fractal->mandelbox.foldingValue - z.z) * zk6);
	aux->color += (zk5 + zk6) * fractal->mandelbox.color.factor.z;

	double r2 = dot(z, z);
	double tglad_factor2 = native_divide(fractal->mandelbox.fR2, r2);
	double rk1 = SmoothConditionALessB(r2, fractal->mandelbox.mR2, sm);
	double rk2 = SmoothConditionALessB(r2, fractal->mandelbox.fR2, sm);
	double rk21 = (1.0 - rk1) * rk2;

	z = mad(z, (1.0 - rk1), z * (fractal->mandelbox.mboxFactor1 * rk1));
	z = mad(z, (1.0 - rk21), z * (tglad_factor2 * rk21));
	aux->DE = mad(aux->DE, (1.0 - rk1), aux->DE * (fractal->mandelbox.mboxFactor1 * rk1));
	aux->DE = mad(aux->DE, (1.0 - rk21), aux->DE * (tglad_factor2 * rk21));
	aux->color += rk1 * fractal->mandelbox.color.factorSp1;
	aux->color += rk21 * fractal->mandelbox.color.factorSp2;

	z = Matrix33MulFloat4(fractal->mandelbox.mainRot, z);
	z = z * fractal->mandelbox.scale;

	aux->DE = aux->DE * fabs(fractal->mandelbox.scale) + 1.0;
	return z;
}
#endif
