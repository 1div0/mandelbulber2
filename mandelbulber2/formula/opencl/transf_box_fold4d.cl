/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * box fold 4D
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 TransfBoxFold4dIteration(float4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (z4D->x > fractal->mandelbox.foldingLimit)
	{
		z4D->x = fractal->mandelbox.foldingValue - z4D->x;
		aux->color += fractal->mandelbox.color.factor4D.x;
	}
	else if (z4D->x < -fractal->mandelbox.foldingLimit)
	{
		z4D->x = -fractal->mandelbox.foldingValue - z4D->x;
		aux->color += fractal->mandelbox.color.factor4D.x;
	}
	if (z4D->y > fractal->mandelbox.foldingLimit)
	{
		z4D->y = fractal->mandelbox.foldingValue - z4D->y;
		aux->color += fractal->mandelbox.color.factor4D.y;
	}
	else if (z4D->y < -fractal->mandelbox.foldingLimit)
	{
		z4D->y = -fractal->mandelbox.foldingValue - z4D->y;
		aux->color += fractal->mandelbox.color.factor4D.y;
	}
	if (z4D->z > fractal->mandelbox.foldingLimit)
	{
		z4D->z = fractal->mandelbox.foldingValue - z4D->z;
		aux->color += fractal->mandelbox.color.factor4D.z;
	}
	else if (z4D->z < -fractal->mandelbox.foldingLimit)
	{
		z4D->z = -fractal->mandelbox.foldingValue - z4D->z;
		aux->color += fractal->mandelbox.color.factor4D.z;
	}
	if (z4D->z > fractal->mandelbox.foldingLimit)
	{
		z4D->z = fractal->mandelbox.foldingValue - z4D->w;
		aux->color += fractal->mandelbox.color.factor4D.w;
	}
	else if (z4D->z < -fractal->mandelbox.foldingLimit)
	{
		z4D->z = -fractal->mandelbox.foldingValue - z4D->w;
		aux->color += fractal->mandelbox.color.factor4D.w;
	}
	return z;
}
#else
double4 TransfBoxFold4dIteration(double4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (z4D->x > fractal->mandelbox.foldingLimit)
	{
		z4D->x = fractal->mandelbox.foldingValue - z4D->x;
		aux->color += fractal->mandelbox.color.factor4D.x;
	}
	else if (z4D->x < -fractal->mandelbox.foldingLimit)
	{
		z4D->x = -fractal->mandelbox.foldingValue - z4D->x;
		aux->color += fractal->mandelbox.color.factor4D.x;
	}
	if (z4D->y > fractal->mandelbox.foldingLimit)
	{
		z4D->y = fractal->mandelbox.foldingValue - z4D->y;
		aux->color += fractal->mandelbox.color.factor4D.y;
	}
	else if (z4D->y < -fractal->mandelbox.foldingLimit)
	{
		z4D->y = -fractal->mandelbox.foldingValue - z4D->y;
		aux->color += fractal->mandelbox.color.factor4D.y;
	}
	if (z4D->z > fractal->mandelbox.foldingLimit)
	{
		z4D->z = fractal->mandelbox.foldingValue - z4D->z;
		aux->color += fractal->mandelbox.color.factor4D.z;
	}
	else if (z4D->z < -fractal->mandelbox.foldingLimit)
	{
		z4D->z = -fractal->mandelbox.foldingValue - z4D->z;
		aux->color += fractal->mandelbox.color.factor4D.z;
	}
	if (z4D->z > fractal->mandelbox.foldingLimit)
	{
		z4D->z = fractal->mandelbox.foldingValue - z4D->w;
		aux->color += fractal->mandelbox.color.factor4D.w;
	}
	else if (z4D->z < -fractal->mandelbox.foldingLimit)
	{
		z4D->z = -fractal->mandelbox.foldingValue - z4D->w;
		aux->color += fractal->mandelbox.color.factor4D.w;
	}
	return z;
}
#endif
