/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Adds Cpixel constant to z vector

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_transf_add_cpixel.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TransfAddCpixel4dIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	REAL4 t = aux->const_c;
	if (fractal->transformCommon.functionEnabledEFalse) t = aux->c;

	if (fractal->transformCommon.functionEnabledAFalse)
	{ // c.w = rad
		t = (REAL4)(t.x, t.y, t.z, 0.0);
		t = (REAL4)(t.x, t.y, t.z, length(t));
	}

	if (fractal->transformCommon.functionEnabledFalse)
	{ // quadray
		t = (REAL4)(t.x + t.y + t.z, -t.x - t.y + t.z, -t.x + t.y - t.z, t.x - t.y - t.z);
	}

	if (fractal->transformCommon.functionEnabledBFalse) t = fabs(t);

	if (fractal->transformCommon.functionEnabledCFalse)
		t = fabs(t - fractal->transformCommon.offsetA0000);

	if (fractal->transformCommon.functionEnabledDFalse)
	{
		t.x = sign(z.x) * t.x;
		t.y = sign(z.y) * t.y;
		t.z = sign(z.z) * t.z;
		t.w = sign(z.w) * t.w;
	}

	t = t * fractal->transformCommon.scale1111;

	z += t;
	aux->c = t;

	if (fractal->transformCommon.addCpixelEnabledFalse) aux->const_c = t;
	else z += t;
	aux->c = t;

	aux->DE = aux->DE * fractal->analyticDE.scale1 + fractal->analyticDE.offset0;
	return z;
}
