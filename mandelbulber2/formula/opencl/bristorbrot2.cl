/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2019 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Bristorbrot V2 formula
 * @reference http://www.fractalforums.com/theory/bristorbrot-3d/
 * by Doug Bristor

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the function "Bristorbrot2Iteration" in the file fractal_formulas.cpp
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 Bristorbrot2Iteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	int dofabs = fractal->transformCommon.functionEnabled;

	aux->DE = aux->DE * 2.0f * aux->r;
	REAL x2 = z.x * z.x;
	REAL y2 = z.y * z.y;
	REAL z2 = z.z * z.z;

	REAL sign = (z2 >= y2) ? -1.0f : 1.0f; // creates fractal surface modification 2019
	sign = (z.x >= 0.0f) ? sign : -sign;

	REAL tmpy = (dofabs) ? fabs(z.y) * sign : z.y;
	REAL tmpz = (dofabs) ? fabs(z.z) * sign : z.z;

	REAL newx = x2 - y2 - z2;
	REAL newy = z.y * (mad(z.x, 2.0f, -tmpz));
	REAL newz = z.z * (mad(z.x, 2.0f, tmpy));

	z.x = newx;
	z.y = newy;
	z.z = newz;
	return z;
}