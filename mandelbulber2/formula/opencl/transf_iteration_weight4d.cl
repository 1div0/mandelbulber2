/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * iteration weight 4D
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void TransfIterationWeight4dIteration(
	float4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	float4 zA4 = (aux->i == fractal->transformCommon.intA) ? *z4D : (float4){};
	float4 zB4 = (aux->i == fractal->transformCommon.intB) ? *z4D : (float4){};

	*z4D = (*z4D * fractal->transformCommon.scale) + (zA4 * fractal->transformCommon.offset)
				 + (zB4 * fractal->transformCommon.offset0);
	aux->DE *= fractal->transformCommon.scale;
	aux->r_dz *= fractal->transformCommon.scale;
}
#else
void TransfIterationWeight4dIteration(
	double4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	double4 zA4 = (aux->i == fractal->transformCommon.intA) ? *z4D : (double4){};
	double4 zB4 = (aux->i == fractal->transformCommon.intB) ? *z4D : (double4){};

	*z4D = (*z4D * fractal->transformCommon.scale) + (zA4 * fractal->transformCommon.offset)
				 + (zB4 * fractal->transformCommon.offset0);
	aux->DE *= fractal->transformCommon.scale;
	aux->r_dz *= fractal->transformCommon.scale;
}
#endif
