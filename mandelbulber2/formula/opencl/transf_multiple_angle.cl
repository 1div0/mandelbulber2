/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * multiple angle
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 TransfMultipleAngleIteration(float4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	float th0 = asin(native_divide(z.z, aux->r));
	float ph0 = atan2(z.y, z.x);
	float th = th0 * fractal->transformCommon.multiplication;
	float ph = ph0 * fractal->transformCommon.multiplication;
	float cth = native_cos(th);
	z = (float4){cth * native_cos(ph), cth * native_sin(ph), native_sin(th), 0.0f} * aux->r;
	return z;
}
#else
double4 TransfMultipleAngleIteration(double4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	double th0 = asin(native_divide(z.z, aux->r));
	double ph0 = atan2(z.y, z.x);
	double th = th0 * fractal->transformCommon.multiplication;
	double ph = ph0 * fractal->transformCommon.multiplication;
	double cth = native_cos(th);
	z = CVector4(cth * native_cos(ph), cth * native_sin(ph), native_sin(th), 0.0) * aux->r;
	return z;
}
#endif
