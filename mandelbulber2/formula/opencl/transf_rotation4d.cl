/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * rotation 4D
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void TransfRotation4dIteration(float4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
// temp 4D rotation
{
	Q_UNUSED(aux);

	float4 tp;
	if (fractal->transformCommon.rotation44a.x != 0)
	{
		tp = *z4D;
		float alpha = fractal->transformCommon.rotation44a.x * M_PI_180;
		z4D->x = mad(tp.x, native_cos(alpha), tp.y * native_sin(alpha));
		z4D->y = tp.x * -native_sin(alpha) + tp.y * native_cos(alpha);
	}
	if (fractal->transformCommon.rotation44a.y != 0)
	{
		tp = *z4D;
		float beta = fractal->transformCommon.rotation44a.y * M_PI_180;
		z4D->y = mad(tp.y, native_cos(beta), tp.z * native_sin(beta));
		z4D->z = tp.y * -native_sin(beta) + tp.z * native_cos(beta);
	}
	if (fractal->transformCommon.rotation44a.z != 0)
	{
		tp = *z4D;
		float gamma = fractal->transformCommon.rotation44a.z * M_PI_180;
		z4D->x = mad(tp.x, native_cos(gamma), tp.z * native_sin(gamma));
		z4D->z = tp.x * -native_sin(gamma) + tp.z * native_cos(gamma);
	}
	if (fractal->transformCommon.rotation44b.x != 0)
	{
		tp = *z4D;
		float delta = fractal->transformCommon.rotation44b.x * M_PI_180;
		z4D->x = mad(tp.x, native_cos(delta), tp.w * native_sin(delta));
		z4D->w = tp.x * -native_sin(delta) + tp.w * native_cos(delta);
	}
	if (fractal->transformCommon.rotation44b.y != 0)
	{
		tp = *z4D;
		float epsilon = fractal->transformCommon.rotation44b.y * M_PI_180;
		z4D->y = mad(tp.y, native_cos(epsilon), tp.w * native_sin(epsilon));
		z4D->w = tp.y * -native_sin(epsilon) + tp.w * native_cos(epsilon);
	}
	if (fractal->transformCommon.rotation44b.z != 0)
	{
		tp = *z4D;
		float zeta = fractal->transformCommon.rotation44b.z * M_PI_180;
		z4D->z = mad(tp.z, native_cos(zeta), tp.w * native_sin(zeta));
		z4D->w = tp.z * -native_sin(zeta) + tp.w * native_cos(zeta);
	}
}
#else
void TransfRotation4dIteration(double4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
// temp 4D rotation
{
	Q_UNUSED(aux);

	double4 tp;
	if (fractal->transformCommon.rotation44a.x != 0)
	{
		tp = *z4D;
		double alpha = fractal->transformCommon.rotation44a.x * M_PI_180;
		z4D->x = mad(tp.x, native_cos(alpha), tp.y * native_sin(alpha));
		z4D->y = tp.x * -native_sin(alpha) + tp.y * native_cos(alpha);
	}
	if (fractal->transformCommon.rotation44a.y != 0)
	{
		tp = *z4D;
		double beta = fractal->transformCommon.rotation44a.y * M_PI_180;
		z4D->y = mad(tp.y, native_cos(beta), tp.z * native_sin(beta));
		z4D->z = tp.y * -native_sin(beta) + tp.z * native_cos(beta);
	}
	if (fractal->transformCommon.rotation44a.z != 0)
	{
		tp = *z4D;
		double gamma = fractal->transformCommon.rotation44a.z * M_PI_180;
		z4D->x = mad(tp.x, native_cos(gamma), tp.z * native_sin(gamma));
		z4D->z = tp.x * -native_sin(gamma) + tp.z * native_cos(gamma);
	}
	if (fractal->transformCommon.rotation44b.x != 0)
	{
		tp = *z4D;
		double delta = fractal->transformCommon.rotation44b.x * M_PI_180;
		z4D->x = mad(tp.x, native_cos(delta), tp.w * native_sin(delta));
		z4D->w = tp.x * -native_sin(delta) + tp.w * native_cos(delta);
	}
	if (fractal->transformCommon.rotation44b.y != 0)
	{
		tp = *z4D;
		double epsilon = fractal->transformCommon.rotation44b.y * M_PI_180;
		z4D->y = mad(tp.y, native_cos(epsilon), tp.w * native_sin(epsilon));
		z4D->w = tp.y * -native_sin(epsilon) + tp.w * native_cos(epsilon);
	}
	if (fractal->transformCommon.rotation44b.z != 0)
	{
		tp = *z4D;
		double zeta = fractal->transformCommon.rotation44b.z * M_PI_180;
		z4D->z = mad(tp.z, native_cos(zeta), tp.w * native_sin(zeta));
		z4D->w = tp.z * -native_sin(zeta) + tp.w * native_cos(zeta);
	}
}
#endif
