/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2019 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Testing
 * Based on a fractal proposed by Buddhi, with a DE outlined by Knighty:
 * http://www.fractalforums.com/3d-fractal-generation/revenge-of-the-half-eaten-menger-sponge/

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the function "TestingTransformIteration" in the file fractal_formulas.cpp
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TestingTransformIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	REAL Pid6 = native_divide(M_PI_F, 6.0f);
	REAL4 VPi6 = (REAL4){native_cos(Pid6), -native_sin(Pid6), 0.0f, 0.0f};
	REAL beta = 72.0f * native_divide(M_PI_F, 360.0f); // ''''''''''''''''''''''''''''''''''''''
	REAL tc = tan(beta);
	REAL4 fp1 = (REAL4){0.5f, 0.0f, native_sqrt(mad(3.0f * tc, tc, -1.0f)) * 0.25f, 0.0f};
	// REAL4 fl1 = normalize((REAL4) {1.0f, 0.0f, -0.5f * native_sqrt(mad(3.0f * tc, tc, -1.0f)),
	// 0.0f});
	REAL4 fl1 = ((REAL4){1.0f, 0.0f, -0.5f * native_sqrt(mad(3.0f * tc, tc, -1.0f)), 0.0f});
	fl1 = native_divide(fl1, length(fl1));
	tc = native_cos(beta);

	REAL scl = fractal->transformCommon.scale4 * tc * tc;

	REAL rr = dot(z, z);

	// Sierpinski triangle symmetry + fold about xy plane
	if (fractal->transformCommon.functionEnabledAxFalse) z.x = fabs(z.x);
	if (fractal->transformCommon.functionEnabledAy) z.y = fabs(z.y);
	if (fractal->transformCommon.functionEnabledAz) z.z = fabs(z.z);
	//	z.y = fabs(z.y);
	//	z.z = fabs(z.z);

	REAL t = 2.0f * min(0.0f, dot(z, VPi6));
	z -= t * VPi6;

	z.y = fabs(z.y);

	// Koch curve fold

	z -= fp1;

	t = 2.0f * min(0.0f, dot(z, fl1));
	z -= t * fl1;

	z += fp1;

	// rotation
	if (fractal->transformCommon.functionEnabledRFalse
			&& aux->i >= fractal->transformCommon.startIterationsR
			&& aux->i < fractal->transformCommon.stopIterationsR)
	{
		z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, z);
	}

	// scale

	z.x -= 1.0f;
	// z *= rot;
	z *= scl;
	z.x += 1.0f;
	aux->DE *= scl;

	rr = dot(z, z);

	aux->dist = native_divide((native_sqrt(rr) - 3.0f), aux->DE);
	return z;
}