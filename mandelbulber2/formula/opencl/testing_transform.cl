/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2020 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Based on a DarkBeam fold formula adapted by Knighty
 * MandalayBox  Fragmentarium /Examples/ Knighty Collection

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_testing_transform.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TestingTransformIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{

	// tglad fold

	z.x = fabs(z.x + fractal->transformCommon.additionConstant111.x)
				- fabs(z.x - fractal->transformCommon.additionConstant111.x) - z.x;
	z.y = fabs(z.y + fractal->transformCommon.additionConstant111.y)
				- fabs(z.y - fractal->transformCommon.additionConstant111.y) - z.y;
	if (fractal->transformCommon.functionEnabled)
	{
		z.z = fabs(z.z + fractal->transformCommon.additionConstant111.z)
					- fabs(z.z - fractal->transformCommon.additionConstant111.z) - z.z;
	}

	// offset
	z += fractal->transformCommon.additionConstant000;

	// spherical fold
	{

		if (!fractal->transformCommon.functionEnabledJFalse) // temp
		{
			REAL4 signs = z;
			signs.x = sign(z.x);
			signs.y = sign(z.y);
			signs.z = sign(z.z);

			z = fabs(z);
			REAL4 tt = fractal->mandelbox.offset;
			z -= tt;

			REAL trr = dot(z, z);
			REAL tp = min(max(native_recip(trr), 1.0f), native_recip(fractal->transformCommon.minR2p25));

			z += tt;
			z *= tp;
			aux->DE *= tp;
			z *= signs;
		}
		else // temp
		{
			REAL rr = dot(z, z);
			// z -= fractal->mandelbox.offset;
			if (rr < fractal->transformCommon.minR2p25)
			{
				REAL tglad_factor1 =
					native_divide(fractal->transformCommon.maxR2d1, fractal->transformCommon.minR2p25);
				z *= tglad_factor1;
				aux->DE *= tglad_factor1;
			}
			else if (rr < fractal->transformCommon.maxR2d1)
			{
				REAL tglad_factor2 = native_divide(fractal->transformCommon.maxR2d1, rr);
				z *= tglad_factor2;
				aux->DE *= tglad_factor2;
			}
			// z += fractal->mandelbox.offset;
		}
	}

	// scale
	REAL useScale = 1.0f;
	useScale = aux->actualScaleA + fractal->transformCommon.scale2;
	z *= useScale;
	aux->DE = mad(aux->DE, fabs(useScale), 1.0f);

	if (fractal->transformCommon.functionEnabledKFalse
			&& aux->i >= fractal->transformCommon.startIterationsK
			&& aux->i < fractal->transformCommon.stopIterationsK)
	{
		// update actualScaleA for next iteration
		REAL vary = fractal->transformCommon.scaleVary0
								* (fabs(aux->actualScaleA) - fractal->transformCommon.scaleC1);
		aux->actualScaleA -= vary;
	}

	// rotation
	z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, z);

	if (fractal->analyticDE.enabledFalse)
		aux->DE = mad(aux->DE, fractal->analyticDE.scale1, fractal->analyticDE.offset0);

	// temp code
	REAL4 p = fabs(z);
	aux->dist = max(p.x, max(p.y, p.z));
	aux->dist = native_divide(aux->dist, aux->DE);

	return z;
}