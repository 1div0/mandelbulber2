/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Menger Sponge and octo
 * from code by Knighty
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void MengerOctoIteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{ // octo
	if (aux->i >= fractal->transformCommon.startIterationsE
			&& aux->i < fractal->transformCommon.stopIterationsE)
	{
		if (z->x + z->y < 0.0f) *z = (float4){-z->y, -z->x, z->z, z->w};

		if (z->x + z->z < 0.0f) // z->xz = -z->zx;
			*z = (float4){-z->z, z->y, -z->x, z->w};

		if (z->x - z->y < 0.0f) // z->xy = z->yx;
			*z = (float4){z->y, z->x, z->z, z->w};

		if (z->x - z->z < 0.0f) // z->xz = z->zx;
			*z = (float4){z->z, z->y, z->x, z->w};

		z->x = fabs(z->x);
		*z = mad(*z, fractal->transformCommon.scale2,
			-fractal->transformCommon.offset100 * (fractal->transformCommon.scale2 - 1.0f));

		aux->DE *= fractal->transformCommon.scale2;
	}
	// box offset
	if (fractal->transformCommon.functionEnabledxFalse
			&& aux->i >= fractal->transformCommon.startIterationsA
			&& aux->i < fractal->transformCommon.stopIterationsA)
	{
		float4 temp = *z;
		z->x = copysign(fractal->transformCommon.additionConstantA000.x, z->x) + z->x;
		z->y = copysign(fractal->transformCommon.additionConstantA000.y, z->y) + z->y;
		z->z = copysign(fractal->transformCommon.additionConstantA000.z, z->z) + z->z;

		if (fractal->transformCommon.functionEnabledzFalse)
		{
			float tempL = length(temp);
			// if (tempL < 1e-21f) tempL = 1e-21f;
			float avgScale = native_divide(length(*z), tempL);
			aux->DE = mad(aux->DE, avgScale, 1.0f);
		}
	}
	// spherical fold
	if (fractal->transformCommon.functionEnabledSFalse
			&& aux->i >= fractal->transformCommon.startIterationsS
			&& aux->i < fractal->transformCommon.stopIterationsS)
	{
		float para = 0.0f;
		float paraAddP0 = 0.0f;
		if (fractal->transformCommon.functionEnabledyFalse)
		{
			// para += paraAddP0 + fractal->transformCommon.minR2p25;
			if (fractal->Cpara.enabledLinear)
			{
				para = fractal->Cpara.para00; // parameter value at iter 0
				float temp0 = para;
				float tempA = fractal->Cpara.paraA;
				float tempB = fractal->Cpara.paraB;
				float tempC = fractal->Cpara.paraC;
				float lengthAB = fractal->Cpara.iterB - fractal->Cpara.iterA;
				float lengthBC = fractal->Cpara.iterC - fractal->Cpara.iterB;
				float grade1 = native_divide((tempA - temp0), fractal->Cpara.iterA);
				float grade2 = native_divide((tempB - tempA), lengthAB);
				float grade3 = native_divide((tempC - tempB), lengthBC);

				// slopes
				if (aux->i < fractal->Cpara.iterA)
				{
					para = temp0 + (aux->i * grade1);
				}
				if (aux->i < fractal->Cpara.iterB && aux->i >= fractal->Cpara.iterA)
				{
					para = mad(grade2, (aux->i - fractal->Cpara.iterA), tempA);
				}
				if (aux->i >= fractal->Cpara.iterB)
				{
					para = mad(grade3, (aux->i - fractal->Cpara.iterB), tempB);
				}

				// Curvi part on "true"
				if (fractal->Cpara.enabledCurves)
				{
					float paraAdd = 0.0f;
					float paraIt;
					if (lengthAB > 2.0f * fractal->Cpara.iterA) // stop  error, todo fix.
					{
						float curve1 = native_divide((grade2 - grade1), (4.0f * fractal->Cpara.iterA));
						float tempL = lengthAB - fractal->Cpara.iterA;
						float curve2 = native_divide((grade3 - grade2), (4.0f * tempL));
						if (aux->i < 2 * fractal->Cpara.iterA)
						{
							paraIt = tempA - fabs(tempA - aux->i);
							paraAdd = paraIt * paraIt * curve1;
						}
						if (aux->i >= 2 * fractal->Cpara.iterA && aux->i < fractal->Cpara.iterB + tempL)
						{
							paraIt = tempB - fabs(tempB * aux->i);
							paraAdd = paraIt * paraIt * curve2;
						}
						para += paraAdd;
					}
				}
			}
			paraAddP0 = 0.0f;
			if (fractal->Cpara.enabledParabFalse)
			{ // parabolic = paraOffset + iter *slope + (iter *iter *scale)
				paraAddP0 = fractal->Cpara.parabOffset0 + (aux->i * fractal->Cpara.parabSlope)
										+ (aux->i * aux->i * 0.001f * fractal->Cpara.parabScale);
			}
		}
		para += paraAddP0 + fractal->transformCommon.minR2p25;
		// spherical fold
		float rr = dot(*z, *z);

		*z += fractal->mandelbox.offset;

		// if (r2 < 1e-21f) r2 = 1e-21f;
		if (rr < para)
		{
			float tglad_factor1 = native_divide(fractal->transformCommon.maxR2d1, para);
			*z *= tglad_factor1;
			aux->DE *= tglad_factor1;
			aux->color += fractal->mandelbox.color.factorSp1;
		}
		else if (rr < fractal->transformCommon.maxR2d1)
		{
			float tglad_factor2 = native_divide(fractal->transformCommon.maxR2d1, rr);
			*z *= tglad_factor2;
			aux->DE *= tglad_factor2;
			aux->color += fractal->mandelbox.color.factorSp2;
		}
		*z -= fractal->mandelbox.offset;
		*z *= fractal->transformCommon.scale08;
		aux->DE = aux->DE * fabs(fractal->transformCommon.scale08);
	}
	// rotation
	if (fractal->transformCommon.functionEnabledRFalse
			&& aux->i >= fractal->transformCommon.startIterationsR
			&& aux->i < fractal->transformCommon.stopIterationsR)
	{
		*z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, *z);
	}
	// menger
	if (fractal->transformCommon.functionEnabledM
			&& aux->i >= fractal->transformCommon.startIterationsM
			&& aux->i < fractal->transformCommon.stopIterationsM)
	{
		*z = fabs(*z);
		if (z->x - z->y < 0.0f)
		{
			float temp = z->y;
			z->y = z->x;
			z->x = temp;
		}
		if (z->x - z->z < 0.0f)
		{
			float temp = z->z;
			z->z = z->x;
			z->x = temp;
		}
		if (z->y - z->z < 0.0f)
		{
			float temp = z->z;
			z->z = z->y;
			z->y = temp;
		}
		*z *= fractal->transformCommon.scale3;
		z->x -= 2.0f * fractal->transformCommon.constantMultiplier111.x;
		z->y -= 2.0f * fractal->transformCommon.constantMultiplier111.y;
		if (z->z > 1.0f) z->z -= 2.0f * fractal->transformCommon.constantMultiplier111.z;
		aux->DE *= fractal->transformCommon.scale3;
		*z += fractal->transformCommon.additionConstant000;
	}
	// iter weight
	if (fractal->transformCommon.functionEnabledFalse)
	{
		float4 zA = (aux->i == fractal->transformCommon.intA) ? *z : (float4){};
		float4 zB = (aux->i == fractal->transformCommon.intB) ? *z : (float4){};

		*z = (*z * fractal->transformCommon.scale1) + (zA * fractal->transformCommon.offsetA0)
				 + (zB * fractal->transformCommon.offsetB0);
		aux->DE *= fractal->transformCommon.scale1;
		aux->r_dz *= fractal->transformCommon.scale1;
	}
}
#else
void MengerOctoIteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{ // octo
	if (aux->i >= fractal->transformCommon.startIterationsE
			&& aux->i < fractal->transformCommon.stopIterationsE)
	{
		if (z->x + z->y < 0.0) *z = (double4){-z->y, -z->x, z->z, z->w};

		if (z->x + z->z < 0.0) // z->xz = -z->zx;
			*z = (double4){-z->z, z->y, -z->x, z->w};

		if (z->x - z->y < 0.0) // z->xy = z->yx;
			*z = (double4){z->y, z->x, z->z, z->w};

		if (z->x - z->z < 0.0) // z->xz = z->zx;
			*z = (double4){z->z, z->y, z->x, z->w};

		z->x = fabs(z->x);
		*z = mad(*z, fractal->transformCommon.scale2,
			-fractal->transformCommon.offset100 * (fractal->transformCommon.scale2 - 1.0));

		aux->DE *= fractal->transformCommon.scale2;
	}
	// box offset
	if (fractal->transformCommon.functionEnabledxFalse
			&& aux->i >= fractal->transformCommon.startIterationsA
			&& aux->i < fractal->transformCommon.stopIterationsA)
	{
		double4 temp = *z;
		z->x = copysign(fractal->transformCommon.additionConstantA000.x, z->x) + z->x;
		z->y = copysign(fractal->transformCommon.additionConstantA000.y, z->y) + z->y;
		z->z = copysign(fractal->transformCommon.additionConstantA000.z, z->z) + z->z;

		if (fractal->transformCommon.functionEnabledzFalse)
		{
			double tempL = length(temp);
			// if (tempL < 1e-21) tempL = 1e-21;
			double avgScale = native_divide(length(*z), tempL);
			aux->DE = aux->DE * avgScale + 1.0;
		}
	}
	// spherical fold
	if (fractal->transformCommon.functionEnabledSFalse
			&& aux->i >= fractal->transformCommon.startIterationsS
			&& aux->i < fractal->transformCommon.stopIterationsS)
	{
		double para = 0.0;
		double paraAddP0 = 0.0;
		if (fractal->transformCommon.functionEnabledyFalse)
		{
			// para += paraAddP0 + fractal->transformCommon.minR2p25;
			if (fractal->Cpara.enabledLinear)
			{
				para = fractal->Cpara.para00; // parameter value at iter 0
				double temp0 = para;
				double tempA = fractal->Cpara.paraA;
				double tempB = fractal->Cpara.paraB;
				double tempC = fractal->Cpara.paraC;
				double lengthAB = fractal->Cpara.iterB - fractal->Cpara.iterA;
				double lengthBC = fractal->Cpara.iterC - fractal->Cpara.iterB;
				double grade1 = native_divide((tempA - temp0), fractal->Cpara.iterA);
				double grade2 = native_divide((tempB - tempA), lengthAB);
				double grade3 = native_divide((tempC - tempB), lengthBC);

				// slopes
				if (aux->i < fractal->Cpara.iterA)
				{
					para = temp0 + (aux->i * grade1);
				}
				if (aux->i < fractal->Cpara.iterB && aux->i >= fractal->Cpara.iterA)
				{
					para = mad(grade2, (aux->i - fractal->Cpara.iterA), tempA);
				}
				if (aux->i >= fractal->Cpara.iterB)
				{
					para = mad(grade3, (aux->i - fractal->Cpara.iterB), tempB);
				}

				// Curvi part on "true"
				if (fractal->Cpara.enabledCurves)
				{
					double paraAdd = 0.0;
					double paraIt;
					if (lengthAB > 2.0 * fractal->Cpara.iterA) // stop  error, todo fix.
					{
						double curve1 = native_divide((grade2 - grade1), (4.0 * fractal->Cpara.iterA));
						double tempL = lengthAB - fractal->Cpara.iterA;
						double curve2 = native_divide((grade3 - grade2), (4.0 * tempL));
						if (aux->i < 2 * fractal->Cpara.iterA)
						{
							paraIt = tempA - fabs(tempA - aux->i);
							paraAdd = paraIt * paraIt * curve1;
						}
						if (aux->i >= 2 * fractal->Cpara.iterA && aux->i < fractal->Cpara.iterB + tempL)
						{
							paraIt = tempB - fabs(tempB * aux->i);
							paraAdd = paraIt * paraIt * curve2;
						}
						para += paraAdd;
					}
				}
			}
			paraAddP0 = 0.0;
			if (fractal->Cpara.enabledParabFalse)
			{ // parabolic = paraOffset + iter *slope + (iter *iter *scale)
				paraAddP0 = fractal->Cpara.parabOffset0 + (aux->i * fractal->Cpara.parabSlope)
										+ (aux->i * aux->i * 0.001 * fractal->Cpara.parabScale);
			}
		}
		para += paraAddP0 + fractal->transformCommon.minR2p25;
		// spherical fold
		double rr = dot(*z, *z);

		*z += fractal->mandelbox.offset;

		// if (r2 < 1e-21) r2 = 1e-21;
		if (rr < para)
		{
			double tglad_factor1 = native_divide(fractal->transformCommon.maxR2d1, para);
			*z *= tglad_factor1;
			aux->DE *= tglad_factor1;
			aux->color += fractal->mandelbox.color.factorSp1;
		}
		else if (rr < fractal->transformCommon.maxR2d1)
		{
			double tglad_factor2 = native_divide(fractal->transformCommon.maxR2d1, rr);
			*z *= tglad_factor2;
			aux->DE *= tglad_factor2;
			aux->color += fractal->mandelbox.color.factorSp2;
		}
		*z -= fractal->mandelbox.offset;
		*z *= fractal->transformCommon.scale08;
		aux->DE = aux->DE * fabs(fractal->transformCommon.scale08);
	}
	// rotation
	if (fractal->transformCommon.functionEnabledRFalse
			&& aux->i >= fractal->transformCommon.startIterationsR
			&& aux->i < fractal->transformCommon.stopIterationsR)
	{
		*z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, *z);
	}
	// menger
	if (fractal->transformCommon.functionEnabledM
			&& aux->i >= fractal->transformCommon.startIterationsM
			&& aux->i < fractal->transformCommon.stopIterationsM)
	{
		*z = fabs(*z);
		if (z->x - z->y < 0.0)
		{
			double temp = z->y;
			z->y = z->x;
			z->x = temp;
		}
		if (z->x - z->z < 0.0)
		{
			double temp = z->z;
			z->z = z->x;
			z->x = temp;
		}
		if (z->y - z->z < 0.0)
		{
			double temp = z->z;
			z->z = z->y;
			z->y = temp;
		}
		*z *= fractal->transformCommon.scale3;
		z->x -= 2.0 * fractal->transformCommon.constantMultiplier111.x;
		z->y -= 2.0 * fractal->transformCommon.constantMultiplier111.y;
		if (z->z > 1.0) z->z -= 2.0 * fractal->transformCommon.constantMultiplier111.z;
		aux->DE *= fractal->transformCommon.scale3;
		*z += fractal->transformCommon.additionConstant000;
	}
	// iter weight
	if (fractal->transformCommon.functionEnabledFalse)
	{
		double4 zA = (aux->i == fractal->transformCommon.intA) ? *z : (double4){};
		double4 zB = (aux->i == fractal->transformCommon.intB) ? *z : (double4){};

		*z = (*z * fractal->transformCommon.scale1) + (zA * fractal->transformCommon.offsetA0)
				 + (zB * fractal->transformCommon.offsetB0);
		aux->DE *= fractal->transformCommon.scale1;
		aux->r_dz *= fractal->transformCommon.scale1;
	}
}
#endif
