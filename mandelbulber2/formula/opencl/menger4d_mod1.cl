/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Menger4D MOD1   from Syntopia & Darkbeam's Menger4 code from M3D
 * @reference
 * http://www.fractalforums.com/mandelbulb-3d/custom-formulas-and-transforms-release-t17106/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void Menger4dMod1Iteration(float4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	float paraAddP0 = 0.0f;
	if (fractal->Cpara.enabledParabFalse)
	{ // parabolic = paraOffset + iter *slope + (iter *iter *scale)
		paraAddP0 = fractal->Cpara.parabOffset0 + (aux->i * fractal->Cpara.parabSlope)
								+ (aux->i * aux->i * 0.001f * fractal->Cpara.parabScale);
		z4D->w += paraAddP0;
	}

	if (aux->i >= fractal->transformCommon.startIterationsC
			&& aux->i < fractal->transformCommon.stopIterationsC)
	{
		*z4D += fractal->transformCommon.additionConstant0000; // offset
	}

	*z4D = fabs(*z4D);
	if (z4D->x - z4D->y < 0.0f)
	{
		float temp = z4D->y;
		z4D->y = z4D->x;
		z4D->x = temp;
	}
	if (z4D->x - z4D->z < 0.0f)
	{
		float temp = z4D->z;
		z4D->z = z4D->x;
		z4D->x = temp;
	}
	if (z4D->y - z4D->z < 0.0f)
	{
		float temp = z4D->z;
		z4D->z = z4D->y;
		z4D->y = temp;
	}
	if (z4D->x - z4D->w < 0.0f)
	{
		float temp = z4D->w;
		z4D->w = z4D->x;
		z4D->x = temp;
	}
	if (z4D->y - z4D->w < 0.0f)
	{
		float temp = z4D->w;
		z4D->w = z4D->y;
		z4D->y = temp;
	}
	if (z4D->z - z4D->w < 0.0f)
	{
		float temp = z4D->w;
		z4D->w = z4D->z;
		z4D->z = temp;
	}

	// 6 plane rotation
	if (fractal->transformCommon.functionEnabledRFalse
			&& aux->i >= fractal->transformCommon.startIterationsR
			&& aux->i < fractal->transformCommon.stopIterationsR)
	{
		float4 tp;
		if (fractal->transformCommon.rotation44a.x != 0)
		{
			tp = *z4D;
			float alpha = fractal->transformCommon.rotation44a.x * M_PI_180;
			z4D->x = mad(tp.x, native_cos(alpha), tp.y * native_sin(alpha));
			z4D->y = tp.x * -native_sin(alpha) + tp.y * native_cos(alpha);
		}
		if (fractal->transformCommon.rotation44a.y != 0)
		{
			tp = *z4D;
			float beta = fractal->transformCommon.rotation44a.y * M_PI_180;
			z4D->y = mad(tp.y, native_cos(beta), tp.z * native_sin(beta));
			z4D->z = tp.y * -native_sin(beta) + tp.z * native_cos(beta);
		}
		if (fractal->transformCommon.rotation44a.z != 0)
		{
			tp = *z4D;
			float gamma = fractal->transformCommon.rotation44a.z * M_PI_180;
			z4D->x = mad(tp.x, native_cos(gamma), tp.z * native_sin(gamma));
			z4D->z = tp.x * -native_sin(gamma) + tp.z * native_cos(gamma);
		}
		if (fractal->transformCommon.rotation44b.x != 0)
		{
			tp = *z4D;
			float delta = fractal->transformCommon.rotation44b.x * M_PI_180;
			z4D->x = mad(tp.x, native_cos(delta), tp.w * native_sin(delta));
			z4D->w = tp.x * -native_sin(delta) + tp.w * native_cos(delta);
		}
		if (fractal->transformCommon.rotation44b.y != 0)
		{
			tp = *z4D;
			float epsilon = fractal->transformCommon.rotation44b.y * M_PI_180;
			z4D->y = mad(tp.y, native_cos(epsilon), tp.w * native_sin(epsilon));
			z4D->w = tp.y * -native_sin(epsilon) + tp.w * native_cos(epsilon);
		}
		if (fractal->transformCommon.rotation44b.z != 0)
		{
			tp = *z4D;
			float zeta = fractal->transformCommon.rotation44b.z * M_PI_180;
			z4D->z = mad(tp.z, native_cos(zeta), tp.w * native_sin(zeta));
			z4D->w = tp.z * -native_sin(zeta) + tp.w * native_cos(zeta);
		}
	}
	float scaleM = fractal->transformCommon.scale3;
	float4 offsetM = fractal->transformCommon.additionConstant111d5;
	z4D->x = mad(scaleM, z4D->x, -offsetM.x);
	z4D->y = mad(scaleM, z4D->y, -offsetM.y);
	z4D->w = mad(scaleM, z4D->w, -offsetM.w);
	if (fractal->transformCommon.functionEnabledz
			&& aux->i >= fractal->transformCommon.startIterationsM
			&& aux->i < fractal->transformCommon.stopIterationsM)
	{
		z4D->z -= 0.5f * native_divide(offsetM.z, scaleM);
		z4D->z = -fabs(-z4D->z);
		z4D->z += 0.5f * native_divide(offsetM.z, scaleM);
	}
	else
	{
		z4D->w = mad(scaleM, z4D->w, -offsetM.w);
	}
	z4D->z *= scaleM;
	aux->DE *= scaleM;

	if (fractal->transformCommon.functionEnabledSFalse
			&& aux->i >= fractal->transformCommon.startIterationsS
			&& aux->i < fractal->transformCommon.stopIterationsS)
	{
		float r2 = 0.f;
		if (fractal->transformCommon.functionEnabledBxFalse)
		{
			r2 = mad(z4D->x, z4D->x, z4D->y * z4D->y);
		}
		if (fractal->transformCommon.functionEnabledByFalse)
		{
			r2 = mad(z4D->z, z4D->z, mad(z4D->x, z4D->x, z4D->y * z4D->y));
		}
		if (fractal->transformCommon.functionEnabledBz)
		//{	r2 = dot(*z4D, *z4D) ;}
		{
			r2 = mad(z4D->x, z4D->x, z4D->y * z4D->y) + mad(z4D->z, z4D->z, z4D->w * z4D->w);
		}
		// if (r2 < 1e-21f && r2 > -1e-21f) r2 = (r2 > 0) ? 1e-21f : -1e-21f;

		if (r2 < fractal->transformCommon.minR2p25)
		{
			*z4D *= fractal->transformCommon.maxMinR2factor;
			aux->DE *= fractal->transformCommon.maxMinR2factor;
			aux->color += fractal->mandelbox.color.factorSp1;
		}
		else if (r2 < fractal->transformCommon.maxR2d1)
		{
			float tglad_factor2 = native_divide(fractal->transformCommon.maxR2d1, r2);
			*z4D *= tglad_factor2;
			aux->DE *= tglad_factor2;
			aux->color += fractal->mandelbox.color.factorSp2;
		}
	}

	if (fractal->transformCommon.functionEnabledFalse)
	{
		float4 zA4 = (aux->i == fractal->transformCommon.intA) ? *z4D : (float4){};
		float4 zB4 = (aux->i == fractal->transformCommon.intB) ? *z4D : (float4){};

		*z4D = (*z4D * fractal->transformCommon.scale) + (zA4 * fractal->transformCommon.offset)
					 + (zB4 * fractal->transformCommon.offset0);
		aux->DE *= fractal->transformCommon.scale;
	}

	aux->DE *= fractal->analyticDE.scale1;
}
#else
void Menger4dMod1Iteration(double4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	double paraAddP0 = 0.0;
	if (fractal->Cpara.enabledParabFalse)
	{ // parabolic = paraOffset + iter *slope + (iter *iter *scale)
		paraAddP0 = fractal->Cpara.parabOffset0 + (aux->i * fractal->Cpara.parabSlope)
								+ (aux->i * aux->i * 0.001 * fractal->Cpara.parabScale);
		z4D->w += paraAddP0;
	}

	if (aux->i >= fractal->transformCommon.startIterationsC
			&& aux->i < fractal->transformCommon.stopIterationsC)
	{
		*z4D += fractal->transformCommon.additionConstant0000; // offset
	}

	*z4D = fabs(*z4D);
	if (z4D->x - z4D->y < 0.0)
	{
		double temp = z4D->y;
		z4D->y = z4D->x;
		z4D->x = temp;
	}
	if (z4D->x - z4D->z < 0.0)
	{
		double temp = z4D->z;
		z4D->z = z4D->x;
		z4D->x = temp;
	}
	if (z4D->y - z4D->z < 0.0)
	{
		double temp = z4D->z;
		z4D->z = z4D->y;
		z4D->y = temp;
	}
	if (z4D->x - z4D->w < 0.0)
	{
		double temp = z4D->w;
		z4D->w = z4D->x;
		z4D->x = temp;
	}
	if (z4D->y - z4D->w < 0.0)
	{
		double temp = z4D->w;
		z4D->w = z4D->y;
		z4D->y = temp;
	}
	if (z4D->z - z4D->w < 0.0)
	{
		double temp = z4D->w;
		z4D->w = z4D->z;
		z4D->z = temp;
	}

	// 6 plane rotation
	if (fractal->transformCommon.functionEnabledRFalse
			&& aux->i >= fractal->transformCommon.startIterationsR
			&& aux->i < fractal->transformCommon.stopIterationsR)
	{
		double4 tp;
		if (fractal->transformCommon.rotation44a.x != 0)
		{
			tp = *z4D;
			double alpha = fractal->transformCommon.rotation44a.x * M_PI_180;
			z4D->x = mad(tp.x, native_cos(alpha), tp.y * native_sin(alpha));
			z4D->y = tp.x * -native_sin(alpha) + tp.y * native_cos(alpha);
		}
		if (fractal->transformCommon.rotation44a.y != 0)
		{
			tp = *z4D;
			double beta = fractal->transformCommon.rotation44a.y * M_PI_180;
			z4D->y = mad(tp.y, native_cos(beta), tp.z * native_sin(beta));
			z4D->z = tp.y * -native_sin(beta) + tp.z * native_cos(beta);
		}
		if (fractal->transformCommon.rotation44a.z != 0)
		{
			tp = *z4D;
			double gamma = fractal->transformCommon.rotation44a.z * M_PI_180;
			z4D->x = mad(tp.x, native_cos(gamma), tp.z * native_sin(gamma));
			z4D->z = tp.x * -native_sin(gamma) + tp.z * native_cos(gamma);
		}
		if (fractal->transformCommon.rotation44b.x != 0)
		{
			tp = *z4D;
			double delta = fractal->transformCommon.rotation44b.x * M_PI_180;
			z4D->x = mad(tp.x, native_cos(delta), tp.w * native_sin(delta));
			z4D->w = tp.x * -native_sin(delta) + tp.w * native_cos(delta);
		}
		if (fractal->transformCommon.rotation44b.y != 0)
		{
			tp = *z4D;
			double epsilon = fractal->transformCommon.rotation44b.y * M_PI_180;
			z4D->y = mad(tp.y, native_cos(epsilon), tp.w * native_sin(epsilon));
			z4D->w = tp.y * -native_sin(epsilon) + tp.w * native_cos(epsilon);
		}
		if (fractal->transformCommon.rotation44b.z != 0)
		{
			tp = *z4D;
			double zeta = fractal->transformCommon.rotation44b.z * M_PI_180;
			z4D->z = mad(tp.z, native_cos(zeta), tp.w * native_sin(zeta));
			z4D->w = tp.z * -native_sin(zeta) + tp.w * native_cos(zeta);
		}
	}
	double scaleM = fractal->transformCommon.scale3;
	double4 offsetM = fractal->transformCommon.additionConstant111d5;
	z4D->x = mad(scaleM, z4D->x, -offsetM.x);
	z4D->y = mad(scaleM, z4D->y, -offsetM.y);
	z4D->w = mad(scaleM, z4D->w, -offsetM.w);
	if (fractal->transformCommon.functionEnabledz
			&& aux->i >= fractal->transformCommon.startIterationsM
			&& aux->i < fractal->transformCommon.stopIterationsM)
	{
		z4D->z -= 0.5 * native_divide(offsetM.z, scaleM);
		z4D->z = -fabs(-z4D->z);
		z4D->z += 0.5 * native_divide(offsetM.z, scaleM);
	}
	else
	{
		z4D->w = mad(scaleM, z4D->w, -offsetM.w);
	}
	z4D->z *= scaleM;
	aux->DE *= scaleM;

	if (fractal->transformCommon.functionEnabledSFalse
			&& aux->i >= fractal->transformCommon.startIterationsS
			&& aux->i < fractal->transformCommon.stopIterationsS)
	{
		double r2 = 0.;
		if (fractal->transformCommon.functionEnabledBxFalse)
		{
			r2 = mad(z4D->x, z4D->x, z4D->y * z4D->y);
		}
		if (fractal->transformCommon.functionEnabledByFalse)
		{
			r2 = mad(z4D->z, z4D->z, mad(z4D->x, z4D->x, z4D->y * z4D->y));
		}
		if (fractal->transformCommon.functionEnabledBz)
		//{	r2 = dot(*z4D, *z4D) ;}
		{
			r2 = mad(z4D->x, z4D->x, z4D->y * z4D->y) + mad(z4D->z, z4D->z, z4D->w * z4D->w);
		}
		// if (r2 < 1e-21 && r2 > -1e-21) r2 = (r2 > 0) ? 1e-21 : -1e-21;

		if (r2 < fractal->transformCommon.minR2p25)
		{
			*z4D *= fractal->transformCommon.maxMinR2factor;
			aux->DE *= fractal->transformCommon.maxMinR2factor;
			aux->color += fractal->mandelbox.color.factorSp1;
		}
		else if (r2 < fractal->transformCommon.maxR2d1)
		{
			double tglad_factor2 = native_divide(fractal->transformCommon.maxR2d1, r2);
			*z4D *= tglad_factor2;
			aux->DE *= tglad_factor2;
			aux->color += fractal->mandelbox.color.factorSp2;
		}
	}

	if (fractal->transformCommon.functionEnabledFalse)
	{
		double4 zA4 = (aux->i == fractal->transformCommon.intA) ? *z4D : (double4){};
		double4 zB4 = (aux->i == fractal->transformCommon.intB) ? *z4D : (double4){};

		*z4D = (*z4D * fractal->transformCommon.scale) + (zA4 * fractal->transformCommon.offset)
					 + (zB4 * fractal->transformCommon.offset0);
		aux->DE *= fractal->transformCommon.scale;
	}

	aux->DE *= fractal->analyticDE.scale1;
}
#endif
