/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Bristorbrot formula
 * @reference http://www.fractalforums.com/theory/bristorbrot-3d/
 * by Doug Bristor
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void BristorbrotIteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(fractal);

	aux->r_dz = aux->r_dz * 2.0f * aux->r;
	float newx = mad(-z->z, z->z, mad(z->x, z->x, -z->y * z->y));
	float newy = z->y * (mad(2.0f, z->x, -z->z));
	float newz = z->z * (mad(2.0f, z->x, z->y));
	z->x = newx;
	z->y = newy;
	z->z = newz;
}
#else
void BristorbrotIteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(fractal);

	aux->r_dz = aux->r_dz * 2.0 * aux->r;
	double newx = mad(-z->z, z->z, mad(z->x, z->x, -z->y * z->y));
	double newy = z->y * (2.0 * z->x - z->z);
	double newz = z->z * (2.0 * z->x + z->y);
	z->x = newx;
	z->y = newy;
	z->z = newz;
}
#endif
