/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * z = (Az^2 + Bz + C ) / D; ((VectA +ScaleA * z) * fn(z) + scaleB * z + VectC ) * ScaleD
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 TransfPwr2PolynomialIteration(float4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	float4 partA = z;
	if (fractal->transformCommon.functionEnabledFalse) // fabs
		partA = fabs(z);
	if (fractal->transformCommon.functionEnabledxFalse) // pwr3 or z * fabs(z^2)
		partA *= z;
	partA =
		mad(partA, fractal->transformCommon.scale2, fractal->transformCommon.constantMultiplier111);

	float4 fnZ1 = z;
	if (fractal->transformCommon.functionEnabledBxFalse) // native_cos(z*Pi)
	{
		float scalePi = M_PI * fractal->transformCommon.scaleC1;
		fnZ1.x = native_cos(z.x * scalePi);
		fnZ1.y = native_cos(z.y * scalePi);
		fnZ1.z = native_cos(z.z * scalePi);
	}
	if (fractal->transformCommon.functionEnabledyFalse) // pi rotation
		fnZ1 = RotateAroundVectorByAngle4(fnZ1, fractal->transformCommon.constantMultiplier111.xyz,
			M_PI * fractal->transformCommon.scale0);				// * cPI ;
	if (fractal->transformCommon.functionEnabledzFalse) // box offset
	{
		fnZ1.x = fnZ1.x + copysign(fractal->transformCommon.additionConstant000.x, fnZ1.x);
		fnZ1.y = fnZ1.y + copysign(fractal->transformCommon.additionConstant000.y, fnZ1.y);
		fnZ1.z = fnZ1.z + copysign(fractal->transformCommon.additionConstant000.z, fnZ1.z);
	}

	if (fractal->transformCommon.functionEnabledAxFalse) // fabs fnZ1
		fnZ1 = fabs(fnZ1);

	float4 partB = z;
	if (fractal->transformCommon.functionEnabledAzFalse) partB = fabs(z);
	partB *= fractal->transformCommon.scale4;
	z = fractal->transformCommon.constantMultiplierB111 + mad(-fnZ1, partA, partB);
	z *= fractal->transformCommon.scale025;

	aux->DE = mad(aux->DE * 4.0f, fractal->analyticDE.scaleLin, fractal->analyticDE.offsetLin);
	return z;
}
#else
double4 TransfPwr2PolynomialIteration(
	double4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	double4 partA = z;
	if (fractal->transformCommon.functionEnabledFalse) // fabs
		partA = fabs(z);
	if (fractal->transformCommon.functionEnabledxFalse) // pwr3 or z * fabs(z^2)
		partA *= z;
	partA =
		mad(partA, fractal->transformCommon.scale2, fractal->transformCommon.constantMultiplier111);

	double4 fnZ1 = z;
	if (fractal->transformCommon.functionEnabledBxFalse) // native_cos(z*Pi)
	{
		double scalePi = M_PI * fractal->transformCommon.scaleC1;
		fnZ1.x = native_cos(z.x * scalePi);
		fnZ1.y = native_cos(z.y * scalePi);
		fnZ1.z = native_cos(z.z * scalePi);
	}
	if (fractal->transformCommon.functionEnabledyFalse) // pi rotation
		fnZ1 = RotateAroundVectorByAngle4(fnZ1, fractal->transformCommon.constantMultiplier111.xyz,
			M_PI * fractal->transformCommon.scale0);				// * cPI ;
	if (fractal->transformCommon.functionEnabledzFalse) // box offset
	{
		fnZ1.x = fnZ1.x + copysign(fractal->transformCommon.additionConstant000.x, fnZ1.x);
		fnZ1.y = fnZ1.y + copysign(fractal->transformCommon.additionConstant000.y, fnZ1.y);
		fnZ1.z = fnZ1.z + copysign(fractal->transformCommon.additionConstant000.z, fnZ1.z);
	}

	if (fractal->transformCommon.functionEnabledAxFalse) // fabs fnZ1
		fnZ1 = fabs(fnZ1);

	double4 partB = z;
	if (fractal->transformCommon.functionEnabledAzFalse) partB = fabs(z);
	partB *= fractal->transformCommon.scale4;
	z = fractal->transformCommon.constantMultiplierB111 + mad(-fnZ1, partA, partB);
	z *= fractal->transformCommon.scale025;

	aux->DE = aux->DE * 4.0 * fractal->analyticDE.scaleLin + fractal->analyticDE.offsetLin;
	return z;
}
#endif
