/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * scale vary Abox- DarkBeams
 * @reference
 * http://www.fractalforums.com/mandelbulb-3d/custom-formulas-and-transforms-release-t17106/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 TransfScaleVaryAboxIteration(float4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (aux->i >= fractal->transformCommon.startIterations
			&& aux->i < fractal->transformCommon.stopIterations)
	{
		aux->actualScale = mad((fabs(aux->actualScale) - 1.0f), fractal->mandelboxVary4D.scaleVary,
			fractal->mandelbox.scale);
		z *= aux->actualScale;
		aux->DE = mad(aux->DE, fabs(aux->actualScale), 1.0f);
		aux->r_dz *= fabs(aux->actualScale);
	}
	else
	{
		z *= fractal->mandelbox.scale;
		aux->DE = mad(aux->DE, fabs(fractal->mandelbox.scale), 1.0f);
		aux->r_dz *= fabs(fractal->mandelbox.scale);
	}
	return z;
}
#else
double4 TransfScaleVaryAboxIteration(double4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (aux->i >= fractal->transformCommon.startIterations
			&& aux->i < fractal->transformCommon.stopIterations)
	{
		aux->actualScale = mad(
			(fabs(aux->actualScale) - 1.0), fractal->mandelboxVary4D.scaleVary, fractal->mandelbox.scale);
		z *= aux->actualScale;
		aux->DE = aux->DE * fabs(aux->actualScale) + 1.0;
		aux->r_dz *= fabs(aux->actualScale);
	}
	else
	{
		z *= fractal->mandelbox.scale;
		aux->DE = aux->DE * fabs(fractal->mandelbox.scale) + 1.0;
		aux->r_dz *= fabs(fractal->mandelbox.scale);
	}
	return z;
}
#endif
