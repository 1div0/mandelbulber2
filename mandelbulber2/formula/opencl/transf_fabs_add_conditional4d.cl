/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
* fabs add conditional4D
*/

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 TransfFabsAddConditional4dIteration(
	float4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (fractal->transformCommon.functionEnabledx)
	{
		z4D->x = copysign((fractal->transformCommon.offset1111.x - fabs(z4D->x)
												+ fabs(z4D->x) * fractal->transformCommon.additionConstant0000.x),
			z4D->x);
	}

	if (fractal->transformCommon.functionEnabledy)
	{
		z4D->y = copysign((fractal->transformCommon.offset1111.y - fabs(z4D->y)
												+ fabs(z4D->y) * fractal->transformCommon.additionConstant0000.y),
			z4D->y);
	}

	if (fractal->transformCommon.functionEnabledz)
	{
		z4D->z = copysign((fractal->transformCommon.offset1111.z - fabs(z4D->z)
												+ fabs(z4D->z) * fractal->transformCommon.additionConstant0000.z),
			z4D->z);
	}

	if (fractal->transformCommon.functionEnabledw)
	{
		z4D->w = copysign((fractal->transformCommon.offset1111.w - fabs(z4D->w)
												+ fabs(z4D->w) * fractal->transformCommon.additionConstant0000.w),
			z4D->w);
	}
	aux->DE *= fractal->analyticDE.scale1; // DE tweak
	return z;
}
#else
double4 TransfFabsAddConditional4dIteration(
	double4 *z4D, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (fractal->transformCommon.functionEnabledx)
	{
		z4D->x = copysign((fractal->transformCommon.offset1111.x - fabs(z4D->x)
												+ fabs(z4D->x) * fractal->transformCommon.additionConstant0000.x),
			z4D->x);
	}

	if (fractal->transformCommon.functionEnabledy)
	{
		z4D->y = copysign((fractal->transformCommon.offset1111.y - fabs(z4D->y)
												+ fabs(z4D->y) * fractal->transformCommon.additionConstant0000.y),
			z4D->y);
	}

	if (fractal->transformCommon.functionEnabledz)
	{
		z4D->z = copysign((fractal->transformCommon.offset1111.z - fabs(z4D->z)
												+ fabs(z4D->z) * fractal->transformCommon.additionConstant0000.z),
			z4D->z);
	}

	if (fractal->transformCommon.functionEnabledw)
	{
		z4D->w = copysign((fractal->transformCommon.offset1111.w - fabs(z4D->w)
												+ fabs(z4D->w) * fractal->transformCommon.additionConstant0000.w),
			z4D->w);
	}
	aux->DE *= fractal->analyticDE.scale1; // DE tweak
	return z;
}
#endif
