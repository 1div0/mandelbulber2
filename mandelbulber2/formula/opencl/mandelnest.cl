/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2020 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Classic Mandelbulb fractal.
 * @reference http://www.fractalforums.com/3d-fractal-generation/true-3d-mandlebrot-type-fractal/

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_mandelbulb.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 MandelnestIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{

	double Power = fractal->bulb.power;
	double r = aux.r;

	//if (fractal->transformCommon.functionEnabledFalse && aux->pos_neg < 0.0f)

	REAL Power = fractal->bulb.power;
	REAL r = aux->r;

	//if (fractal->transformCommon.functionEnabledFalse && aux->pos_neg < 0.0f)

	REAL rN =  1.0f / r;
	aux->DE *= rN;


	if (!fractal->transformCommon.functionEnabledFalse)
	{
		z.x = (sin(Power * asin(z.x * rN)));
		z.y = (sin(Power * asin(z.y * rN)));
		z.z = (sin(Power * asin(z.z * rN)));
	}
	else
	{
		z.x = (cos(Power * acos(z.x * rN)));
		z.y = (cos(Power * acos(z.y * rN)));
		z.z = (cos(Power * acos(z.z * rN)));
	}

	if (!fractal->transformCommon.functionEnabledAFalse)
	{
		rN = 1.0f / length(z);
		z *= rN;
		aux->DE *= rN;
	}

	z *=  pow(r, Power - fractal->transformCommon.offset1);

	//aux->pos_neg *= -1.0f;
	//z+=aux->c;
	r = length(z);

	aux->DE = aux->DE * Power * r + 1.0f;

	aux->DE = aux->DE * fractal->analyticDE.scale1 + fractal->analyticDE.offset0;

	aux->dist = 0.5 * fractal->analyticDE.offset1 * log(r) * r / aux->DE;




	return z;
}
