/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Sierpinski3D. made from Darkbeam's Sierpinski code from M3D
 * @reference
 * http://www.fractalforums.com/mandelbulb-3d/custom-formulas-and-transforms-release-t17106/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void Sierpinski3dIteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{

	float4 temp = *z;

	// Normal full tetra-fold;
	if (fractal->transformCommon.functionEnabled)
	{
		if (z->x - z->y < 0.0f)
		{
			float temp = z->x;
			z->x = z->y;
			z->y = temp;
		}
		if (z->x - z->z < 0.0f)
		{
			float temp = z->x;
			z->x = z->z;
			z->z = temp;
		}
		if (z->y - z->z < 0.0f)
		{
			float temp = z->y;
			z->y = z->z;
			z->z = temp;
		}

		if (z->x + z->y < 0.0f)
		{
			temp.x = -z->y;
			z->y = -z->x;
			z->x = temp.x;
		}
		if (z->x + z->z < 0.0f)
		{
			temp.x = -z->z;
			z->z = -z->x;
			z->x = temp.x;
		}
		if (z->y + z->z < 0.0f)
		{
			temp.y = -z->z;
			z->z = -z->y;
			z->y = temp.y;
		}
	}

	// Reversed full tetra-fold;
	if (fractal->transformCommon.functionEnabledFalse)
	{
		if (z->x + z->y < 0.0f)
		{
			temp.x = -z->y;
			z->y = -z->x;
			z->x = temp.x;
		}
		if (z->x + z->z < 0.0f)
		{
			temp.x = -z->z;
			z->z = -z->x;
			z->x = temp.x;
		}
		if (z->y + z->z < 0.0f)
		{
			temp.y = -z->z;
			z->z = -z->y;
			z->y = temp.y;
		}
		if (z->x - z->y < 0.0f)
		{
			float temp = z->y;
			z->y = z->x;
			z->x = temp;
		}
		if (z->x - z->z < 0.0f)
		{
			float temp = z->z;
			z->z = z->x;
			z->x = temp;
		}
		if (z->y - z->z < 0.0f)
		{
			float temp = z->z;
			z->z = z->y;
			z->y = temp;
		}
	}

	*z = *z * fractal->transformCommon.scaleA2;
	aux->DE *= fractal->transformCommon.scaleA2;

	if (aux->i >= fractal->transformCommon.startIterationsC
			&& aux->i < fractal->transformCommon.stopIterationsC)
	{
		*z -= fractal->transformCommon.offset111; // neg offset
	}
	// rotation
	if (fractal->transformCommon.functionEnabledRFalse
			&& aux->i >= fractal->transformCommon.startIterationsR
			&& aux->i < fractal->transformCommon.stopIterationsR)
	{
		*z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, *z);
	}

	aux->DE *= fractal->analyticDE.scale1;
}
#else
void Sierpinski3dIteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{

	double4 temp = *z;

	// Normal full tetra-fold;
	if (fractal->transformCommon.functionEnabled)
	{
		if (z->x - z->y < 0.0)
		{
			double temp = z->x;
			z->x = z->y;
			z->y = temp;
		}
		if (z->x - z->z < 0.0)
		{
			double temp = z->x;
			z->x = z->z;
			z->z = temp;
		}
		if (z->y - z->z < 0.0)
		{
			double temp = z->y;
			z->y = z->z;
			z->z = temp;
		}

		if (z->x + z->y < 0.0)
		{
			temp.x = -z->y;
			z->y = -z->x;
			z->x = temp.x;
		}
		if (z->x + z->z < 0.0)
		{
			temp.x = -z->z;
			z->z = -z->x;
			z->x = temp.x;
		}
		if (z->y + z->z < 0.0)
		{
			temp.y = -z->z;
			z->z = -z->y;
			z->y = temp.y;
		}
	}

	// Reversed full tetra-fold;
	if (fractal->transformCommon.functionEnabledFalse)
	{
		if (z->x + z->y < 0.0)
		{
			temp.x = -z->y;
			z->y = -z->x;
			z->x = temp.x;
		}
		if (z->x + z->z < 0.0)
		{
			temp.x = -z->z;
			z->z = -z->x;
			z->x = temp.x;
		}
		if (z->y + z->z < 0.0)
		{
			temp.y = -z->z;
			z->z = -z->y;
			z->y = temp.y;
		}
		if (z->x - z->y < 0.0)
		{
			double temp = z->y;
			z->y = z->x;
			z->x = temp;
		}
		if (z->x - z->z < 0.0)
		{
			double temp = z->z;
			z->z = z->x;
			z->x = temp;
		}
		if (z->y - z->z < 0.0)
		{
			double temp = z->z;
			z->z = z->y;
			z->y = temp;
		}
	}

	*z = *z * fractal->transformCommon.scaleA2;
	aux->DE *= fractal->transformCommon.scaleA2;

	if (aux->i >= fractal->transformCommon.startIterationsC
			&& aux->i < fractal->transformCommon.stopIterationsC)
	{
		*z -= fractal->transformCommon.offset111; // neg offset
	}
	// rotation
	if (fractal->transformCommon.functionEnabledRFalse
			&& aux->i >= fractal->transformCommon.startIterationsR
			&& aux->i < fractal->transformCommon.stopIterationsR)
	{
		*z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, *z);
	}

	aux->DE *= fractal->analyticDE.scale1;
}
#endif
