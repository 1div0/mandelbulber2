/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2019 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * rotate about vec3

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the function "TransfRotateAboutVec3Iteration" in the file fractal_formulas.cpp
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TransfRotateAboutVec3Iteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	REAL useAngle = fractal->transformCommon.angle0 * M_PI_180;

	if (fractal->transformCommon.functionEnabledEFalse)
	{
		if (aux->i > fractal->transformCommon.startIterationsRV)
		{
			useAngle *=
				(1.0f
					- native_recip((1.0f
													+ native_divide((aux->i - fractal->transformCommon.startIterationsRV),
															fractal->transformCommon.offset0))))
				* fractal->transformCommon.scale1;
		}
	}
	REAL4 rotVec4 = (fractal->transformCommon.offset000);
	// REAL3 rotVec3 =  (REAL3) {fractal->transformCommon.offset000.xyz};
	z = RotateAroundVectorByAngle4(z, (rotVec4.xyz), useAngle);
	return z;
}