/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Benesi Sphere to Cube transform
 * Warps a sphere to a cube; transform made by M.Benesi, optimized by
 * Luca.  Scavenged and edited from code optimized by Luca.
 * @reference http://www.fractalforums.com/mathematics/circle2square/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void TransfBenesiSphereCubeIteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(fractal);
	Q_UNUSED(aux);

	*z *= *z;
	// if (z->z == 0.0f) z->z = 1e-21f;
	float rCyz = native_divide(z->y, z->z);
	if (rCyz < 1.0f)
		rCyz = native_rsqrt(rCyz + 1.0f);
	else
		rCyz = native_rsqrt(native_recip(rCyz) + 1.0f);

	z->y *= rCyz;
	z->z *= rCyz;

	// if (z->x == 0.0f) z->x = 1e-21f;
	float rCxyz = native_divide((mad(z->y, z->y, z->z * z->z)), z->x);

	if (rCxyz < 1.0f)
		rCxyz = native_rsqrt(rCxyz + 1.0f);
	else
		rCxyz = native_rsqrt(native_recip(rCxyz) + 1.0f);

	*z *= rCxyz * SQRT_3_2;
}
#else
void TransfBenesiSphereCubeIteration(
	double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(fractal);
	Q_UNUSED(aux);

	*z *= *z;
	// if (z->z == 0.0) z->z = 1e-21;
	double rCyz = native_divide(z->y, z->z);
	if (rCyz < 1.0)
		rCyz = 1.0 / native_sqrt(rCyz + 1.0);
	else
		rCyz = 1.0 / native_sqrt(1.0 / rCyz + 1.0);

	z->y *= rCyz;
	z->z *= rCyz;

	// if (z->x == 0.0) z->x = 1e-21;
	double rCxyz = native_divide((mad(z->y, z->y, z->z * z->z)), z->x);

	if (rCxyz < 1.0)
		rCxyz = 1.0 / native_sqrt(rCxyz + 1.0);
	else
		rCxyz = 1.0 / native_sqrt(1.0 / rCxyz + 1.0);

	*z *= rCxyz * SQRT_3_2;
}
#endif
