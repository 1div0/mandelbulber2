/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * ABoxModKali, a formula from Mandelbulb3D
 * @reference http://www.fractalforums.com/new-theories-and-research/aboxmodkali-the-2d-version/
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void AboxModKaliIteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	*z = fractal->transformCommon.additionConstant0555 - fabs(*z);
	float rr = dot(*z, *z);
	float MinR = fractal->transformCommon.minR06;
	float dividend = rr < MinR ? MinR : min(rr, 1.0f);
	float m = native_divide(fractal->transformCommon.scale015, dividend);
	*z = *z * m;
	aux->DE = mad(aux->DE, fabs(m), 1.0f);
}
#else
void AboxModKaliIteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	*z = fractal->transformCommon.additionConstant0555 - fabs(*z);
	double rr = dot(*z, *z);
	double MinR = fractal->transformCommon.minR06;
	double dividend = rr < MinR ? MinR : min(rr, 1.0);
	double m = native_divide(fractal->transformCommon.scale015, dividend);
	*z = *z * m;
	aux->DE = aux->DE * fabs(m) + 1.0;
}
#endif
