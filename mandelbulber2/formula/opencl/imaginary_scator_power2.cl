/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * quadratic iteration in imaginary scator algebra
 * @reference
 * http://www.fractalforums.com/new-theories-and-research/
 * ix-possibly-the-holy-grail-fractal-%28in-fff-lore%29
 *            http://luz.izt.uam.mx/index.html/?q=node/95&language=en
 * @author Manuel Fernandez-Guasti
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void ImaginaryScatorPower2Iteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(fractal);
	Q_UNUSED(aux);

	float x2 = z->x * z->x; //+ 1e-061f
	float y2 = z->y * z->y;
	float z2 = z->z * z->z;

	float newx = x2 - y2 - z2 + native_divide((y2 * z2), x2);
	float newy = 2.0f * z->x * z->y * (1.0f - native_divide(z2, x2));
	float newz = 2.0f * z->x * z->z * (1.0f - native_divide(y2, x2));

	z->x = newx;
	z->y = newy;
	z->z = newz;
}
#else
void ImaginaryScatorPower2Iteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	Q_UNUSED(fractal);
	Q_UNUSED(aux);

	double x2 = z->x * z->x; //+ 1e-061
	double y2 = z->y * z->y;
	double z2 = z->z * z->z;

	double newx = x2 - y2 - z2 + native_divide((y2 * z2), x2);
	double newy = 2.0 * z->x * z->y * (1.0 - native_divide(z2, x2));
	double newz = 2.0 * z->x * z->z * (1.0 - native_divide(y2, x2));

	z->x = newx;
	z->y = newy;
	z->z = newz;
}
#endif
