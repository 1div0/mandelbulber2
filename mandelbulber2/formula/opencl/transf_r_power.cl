/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * z(n+1) = z(n) * abs(z(n)) ^ p-1
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
float4 TransfRPowerIteration(float4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	float rp = native_powr(aux->r, fractal->bulb.power - 1.0f);
	aux->r_dz = mad(rp * aux->r_dz, fractal->bulb.power, 1.0f);
	z *= rp;
	aux->DE *= rp;
	return z;
}
#else
double4 TransfRPowerIteration(double4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	double rp = native_powr(aux->r, fractal->bulb.power - 1.0);
	aux->r_dz = rp * aux->r_dz * fractal->bulb.power + 1.0;
	z *= rp;
	aux->DE *= rp;
	return z;
}
#endif
