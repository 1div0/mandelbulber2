/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2017 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Modified Mandelbox (ABox) formula
 */

/* ### This file has been autogenerated. Remove this line, to prevent override. ### */

#ifndef DOUBLE_PRECISION
void FoldBoxMod1Iteration(float4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (aux->i >= fractal->transformCommon.startIterations
			&& aux->i < fractal->transformCommon.stopIterations)
	{
		float4 tempA, tempB;

		if (fractal->transformCommon.functionEnabledx)
			tempA.x = fabs(z->x + fractal->transformCommon.additionConstant111.x);
		if (fractal->transformCommon.functionEnabledAx)
			tempB.x = fabs(z->x - fractal->transformCommon.additionConstantA111.x);
		z->x = tempA.x - tempB.x - (z->x * fractal->transformCommon.scale3D111.x);

		if (fractal->transformCommon.functionEnabledy)
			tempA.y = fabs(z->y + fractal->transformCommon.additionConstant111.y);
		if (fractal->transformCommon.functionEnabledAy)
			tempB.y = fabs(z->y - fractal->transformCommon.additionConstantA111.y);
		z->y = tempA.y - tempB.y - (z->y * fractal->transformCommon.scale3D111.y);

		if (fractal->transformCommon.functionEnabledz)
			tempA.z = fabs(z->z + fractal->transformCommon.additionConstant111.z);
		if (fractal->transformCommon.functionEnabledAz)
			tempB.z = fabs(z->z - fractal->transformCommon.additionConstantA111.z);
		z->z = tempA.z - tempB.z - (z->z * fractal->transformCommon.scale3D111.z);
	}

	if (fractal->transformCommon.functionEnabledFalse
			&& aux->i >= fractal->transformCommon.startIterationsA
			&& aux->i < fractal->transformCommon.stopIterationsA) // box fold
	{
		if (fabs(z->x) > fractal->mandelbox.foldingLimit)
		{
			z->x = copysign(fractal->mandelbox.foldingValue, z->x) - z->x;
			aux->color += fractal->mandelbox.color.factor.x;
		}
		if (fabs(z->y) > fractal->mandelbox.foldingLimit)
		{
			z->y = copysign(fractal->mandelbox.foldingValue, z->y) - z->y;
			aux->color += fractal->mandelbox.color.factor.y;
		}
		float zLimit = fractal->mandelbox.foldingLimit * fractal->transformCommon.scale1;
		float zValue = fractal->mandelbox.foldingValue * fractal->transformCommon.scale1;
		if (fabs(z->z) > zLimit)
		{
			z->z = copysign(zValue, z->z) - z->z;
			aux->color += fractal->mandelbox.color.factor.z;
		}
	}

	if (aux->i >= fractal->transformCommon.startIterationsB
			&& aux->i < fractal->transformCommon.stopIterationsB) // spherical fold
	{
		float r2 = dot(*z, *z);
		// if (r2 < 1e-21f && r2 > -1e-21f)
		//	r2 = (r2 > 0) ? 1e-21f : -1e-21f;
		if (r2 < fractal->mandelbox.mR2)
		{
			*z *= fractal->mandelbox.mboxFactor1;
			aux->DE *= fractal->mandelbox.mboxFactor1;
			aux->color += fractal->mandelbox.color.factorSp1;
		}
		else if (r2 < fractal->mandelbox.fR2)
		{
			float tglad_factor2 = native_divide(fractal->mandelbox.fR2, r2);
			*z *= tglad_factor2;
			aux->DE *= tglad_factor2;
			aux->color += fractal->mandelbox.color.factorSp2;
		}
	}

	*z *= fractal->mandelbox.scale;
	aux->DE = mad(aux->DE, fabs(fractal->mandelbox.scale), 1.0f);
	aux->r_dz *= fabs(fractal->mandelbox.scale);

	if (fractal->mandelbox.mainRotationEnabled && aux->i >= fractal->transformCommon.startIterationsC
			&& aux->i < fractal->transformCommon.stopIterationsC)
	{
		*z = Matrix33MulFloat4(fractal->mandelbox.mainRot, *z);
	}
}
#else
void FoldBoxMod1Iteration(double4 *z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{
	if (aux->i >= fractal->transformCommon.startIterations
			&& aux->i < fractal->transformCommon.stopIterations)
	{
		double4 tempA, tempB;

		if (fractal->transformCommon.functionEnabledx)
			tempA.x = fabs(z->x + fractal->transformCommon.additionConstant111.x);
		if (fractal->transformCommon.functionEnabledAx)
			tempB.x = fabs(z->x - fractal->transformCommon.additionConstantA111.x);
		z->x = tempA.x - tempB.x - (z->x * fractal->transformCommon.scale3D111.x);

		if (fractal->transformCommon.functionEnabledy)
			tempA.y = fabs(z->y + fractal->transformCommon.additionConstant111.y);
		if (fractal->transformCommon.functionEnabledAy)
			tempB.y = fabs(z->y - fractal->transformCommon.additionConstantA111.y);
		z->y = tempA.y - tempB.y - (z->y * fractal->transformCommon.scale3D111.y);

		if (fractal->transformCommon.functionEnabledz)
			tempA.z = fabs(z->z + fractal->transformCommon.additionConstant111.z);
		if (fractal->transformCommon.functionEnabledAz)
			tempB.z = fabs(z->z - fractal->transformCommon.additionConstantA111.z);
		z->z = tempA.z - tempB.z - (z->z * fractal->transformCommon.scale3D111.z);
	}

	if (fractal->transformCommon.functionEnabledFalse
			&& aux->i >= fractal->transformCommon.startIterationsA
			&& aux->i < fractal->transformCommon.stopIterationsA) // box fold
	{
		if (fabs(z->x) > fractal->mandelbox.foldingLimit)
		{
			z->x = copysign(fractal->mandelbox.foldingValue, z->x) - z->x;
			aux->color += fractal->mandelbox.color.factor.x;
		}
		if (fabs(z->y) > fractal->mandelbox.foldingLimit)
		{
			z->y = copysign(fractal->mandelbox.foldingValue, z->y) - z->y;
			aux->color += fractal->mandelbox.color.factor.y;
		}
		double zLimit = fractal->mandelbox.foldingLimit * fractal->transformCommon.scale1;
		double zValue = fractal->mandelbox.foldingValue * fractal->transformCommon.scale1;
		if (fabs(z->z) > zLimit)
		{
			z->z = copysign(zValue, z->z) - z->z;
			aux->color += fractal->mandelbox.color.factor.z;
		}
	}

	if (aux->i >= fractal->transformCommon.startIterationsB
			&& aux->i < fractal->transformCommon.stopIterationsB) // spherical fold
	{
		double r2 = dot(*z, *z);
		// if (r2 < 1e-21 && r2 > -1e-21)
		//	r2 = (r2 > 0) ? 1e-21 : -1e-21;
		if (r2 < fractal->mandelbox.mR2)
		{
			*z *= fractal->mandelbox.mboxFactor1;
			aux->DE *= fractal->mandelbox.mboxFactor1;
			aux->color += fractal->mandelbox.color.factorSp1;
		}
		else if (r2 < fractal->mandelbox.fR2)
		{
			double tglad_factor2 = native_divide(fractal->mandelbox.fR2, r2);
			*z *= tglad_factor2;
			aux->DE *= tglad_factor2;
			aux->color += fractal->mandelbox.color.factorSp2;
		}
	}

	*z *= fractal->mandelbox.scale;
	aux->DE = aux->DE * fabs(fractal->mandelbox.scale) + 1.0;
	aux->r_dz *= fabs(fractal->mandelbox.scale);

	if (fractal->mandelbox.mainRotationEnabled && aux->i >= fractal->transformCommon.startIterationsC
			&& aux->i < fractal->transformCommon.stopIterationsC)
	{
		*z = Matrix33MulFloat4(fractal->mandelbox.mainRot, *z);
	}
}
#endif
